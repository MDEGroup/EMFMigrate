/*
* generated by Xtext
*/

package it.univaq.coevolution.emfmigrate.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EmigGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMigrationLibAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cMigrationLibMigrationLibraryParserRuleCall_0_0 = (RuleCall)cMigrationLibAssignment_0.eContents().get(0);
		private final Assignment cMigrationProgrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMigrationProgrMigrationProgramParserRuleCall_1_0 = (RuleCall)cMigrationProgrAssignment_1.eContents().get(0);
		
		//MyModel:
		//	migrationLib=MigrationLibrary | MigrationProgr=MigrationProgram;
		public ParserRule getRule() { return rule; }

		//migrationLib=MigrationLibrary | MigrationProgr=MigrationProgram
		public Alternatives getAlternatives() { return cAlternatives; }

		//migrationLib=MigrationLibrary
		public Assignment getMigrationLibAssignment_0() { return cMigrationLibAssignment_0; }

		//MigrationLibrary
		public RuleCall getMigrationLibMigrationLibraryParserRuleCall_0_0() { return cMigrationLibMigrationLibraryParserRuleCall_0_0; }

		//MigrationProgr=MigrationProgram
		public Assignment getMigrationProgrAssignment_1() { return cMigrationProgrAssignment_1; }

		//MigrationProgram
		public RuleCall getMigrationProgrMigrationProgramParserRuleCall_1_0() { return cMigrationProgrMigrationProgramParserRuleCall_1_0; }
	}

	public class MigrationLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MigrationLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleIDTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRulesRuleParserRuleCall_3_0 = (RuleCall)cRulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MigrationLibrary:
		//	"Library" title=ID "{" rules+=Rule* "}";
		public ParserRule getRule() { return rule; }

		//"Library" title=ID "{" rules+=Rule* "}"
		public Group getGroup() { return cGroup; }

		//"Library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }

		//title=ID
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		//ID
		public RuleCall getTitleIDTerminalRuleCall_1_0() { return cTitleIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//rules+=Rule*
		public Assignment getRulesAssignment_3() { return cRulesAssignment_3; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_3_0() { return cRulesRuleParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MigrationProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MigrationProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLibsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLibsSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cLibsAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMigrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMigrMigrateKeyword_1_0 = (Keyword)cMigrAssignment_1.eContents().get(0);
		private final Assignment cTypeArtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeArtArtifactParserRuleCall_2_0 = (RuleCall)cTypeArtAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTransformationPackageAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final CrossReference cTransformationPackageEPackageCrossReference_5_0_0 = (CrossReference)cTransformationPackageAssignment_5_0.eContents().get(0);
		private final RuleCall cTransformationPackageEPackageIDTerminalRuleCall_5_0_0_1 = (RuleCall)cTransformationPackageEPackageCrossReference_5_0_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cTransformationPackageAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cTransformationPackageEPackageCrossReference_5_1_1_0 = (CrossReference)cTransformationPackageAssignment_5_1_1.eContents().get(0);
		private final RuleCall cTransformationPackageEPackageIDTerminalRuleCall_5_1_1_0_1 = (RuleCall)cTransformationPackageEPackageCrossReference_5_1_1_0.eContents().get(1);
		private final Keyword cWithKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDeltaAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeltaSTRINGTerminalRuleCall_7_0 = (RuleCall)cDeltaAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRulesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRulesRuleParserRuleCall_9_0 = (RuleCall)cRulesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//MigrationProgram:
		//	("include" libs+=STRING ";")* migr="migrate" typeArt=Artifact name=STRING ":"
		//	(transformationPackage+=[ecore::EPackage] ("," transformationPackage+=[ecore::EPackage])) "with" delta=STRING "{"
		//	rules+=Rule* "}";
		public ParserRule getRule() { return rule; }

		//("include" libs+=STRING ";")* migr="migrate" typeArt=Artifact name=STRING ":" (transformationPackage+=[ecore::EPackage]
		//("," transformationPackage+=[ecore::EPackage])) "with" delta=STRING "{" rules+=Rule* "}"
		public Group getGroup() { return cGroup; }

		//("include" libs+=STRING ";")*
		public Group getGroup_0() { return cGroup_0; }

		//"include"
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }

		//libs+=STRING
		public Assignment getLibsAssignment_0_1() { return cLibsAssignment_0_1; }

		//STRING
		public RuleCall getLibsSTRINGTerminalRuleCall_0_1_0() { return cLibsSTRINGTerminalRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//migr="migrate"
		public Assignment getMigrAssignment_1() { return cMigrAssignment_1; }

		//"migrate"
		public Keyword getMigrMigrateKeyword_1_0() { return cMigrMigrateKeyword_1_0; }

		//typeArt=Artifact
		public Assignment getTypeArtAssignment_2() { return cTypeArtAssignment_2; }

		//Artifact
		public RuleCall getTypeArtArtifactParserRuleCall_2_0() { return cTypeArtArtifactParserRuleCall_2_0; }

		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//transformationPackage+=[ecore::EPackage] ("," transformationPackage+=[ecore::EPackage])
		public Group getGroup_5() { return cGroup_5; }

		//transformationPackage+=[ecore::EPackage]
		public Assignment getTransformationPackageAssignment_5_0() { return cTransformationPackageAssignment_5_0; }

		//[ecore::EPackage]
		public CrossReference getTransformationPackageEPackageCrossReference_5_0_0() { return cTransformationPackageEPackageCrossReference_5_0_0; }

		//ID
		public RuleCall getTransformationPackageEPackageIDTerminalRuleCall_5_0_0_1() { return cTransformationPackageEPackageIDTerminalRuleCall_5_0_0_1; }

		//"," transformationPackage+=[ecore::EPackage]
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//transformationPackage+=[ecore::EPackage]
		public Assignment getTransformationPackageAssignment_5_1_1() { return cTransformationPackageAssignment_5_1_1; }

		//[ecore::EPackage]
		public CrossReference getTransformationPackageEPackageCrossReference_5_1_1_0() { return cTransformationPackageEPackageCrossReference_5_1_1_0; }

		//ID
		public RuleCall getTransformationPackageEPackageIDTerminalRuleCall_5_1_1_0_1() { return cTransformationPackageEPackageIDTerminalRuleCall_5_1_1_0_1; }

		//"with"
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }

		//delta=STRING
		public Assignment getDeltaAssignment_7() { return cDeltaAssignment_7; }

		//STRING
		public RuleCall getDeltaSTRINGTerminalRuleCall_7_0() { return cDeltaSTRINGTerminalRuleCall_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//rules+=Rule*
		public Assignment getRulesAssignment_9() { return cRulesAssignment_9; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_9_0() { return cRulesRuleParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artifact");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeTransformationKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeModelKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeTcsModelKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		
		//Artifact:
		//	type=("transformation" | "model" | "tcs-model");
		public ParserRule getRule() { return rule; }

		//type=("transformation" | "model" | "tcs-model")
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"transformation" | "model" | "tcs-model"
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }

		//"transformation"
		public Keyword getTypeTransformationKeyword_0_0() { return cTypeTransformationKeyword_0_0; }

		//"model"
		public Keyword getTypeModelKeyword_0_1() { return cTypeModelKeyword_0_1; }

		//"tcs-model"
		public Keyword getTypeTcsModelKeyword_0_2() { return cTypeTcsModelKeyword_0_2; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilterOpDefParserRuleCall_3_0 = (RuleCall)cFilterAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRewritingRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRewritingRulesRewritingRuleParserRuleCall_6_0 = (RuleCall)cRewritingRulesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rule:
		//	"rule" name=ID "[" //|refFilter=[edelta::ComplexOperatorDef]
		//	filter=OpDef "]" "{" rewritingRules+=RewritingRule* "}";
		public ParserRule getRule() { return rule; }

		//"rule" name=ID "[" //|refFilter=[edelta::ComplexOperatorDef]
		//filter=OpDef "]" "{" rewritingRules+=RewritingRule* "}"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		////|refFilter=[edelta::ComplexOperatorDef]
		//filter=OpDef
		public Assignment getFilterAssignment_3() { return cFilterAssignment_3; }

		//OpDef
		public RuleCall getFilterOpDefParserRuleCall_3_0() { return cFilterOpDefParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//rewritingRules+=RewritingRule*
		public Assignment getRewritingRulesAssignment_6() { return cRewritingRulesAssignment_6; }

		//RewritingRule
		public RuleCall getRewritingRulesRewritingRuleParserRuleCall_6_0() { return cRewritingRulesRewritingRuleParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEPackageOpDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEClassOpDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEAttributeOpDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEReferenceOpDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////ComplexOpDef:op=[];
		//OpDef:
		//	EPackageOpDef | EClassOpDef | EAttributeOpDef | EReferenceOpDef;
		public ParserRule getRule() { return rule; }

		//EPackageOpDef | EClassOpDef | EAttributeOpDef | EReferenceOpDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//EPackageOpDef
		public RuleCall getEPackageOpDefParserRuleCall_0() { return cEPackageOpDefParserRuleCall_0; }

		//EClassOpDef
		public RuleCall getEClassOpDefParserRuleCall_1() { return cEClassOpDefParserRuleCall_1; }

		//EAttributeOpDef
		public RuleCall getEAttributeOpDefParserRuleCall_2() { return cEAttributeOpDefParserRuleCall_2; }

		//EReferenceOpDef
		public RuleCall getEReferenceOpDefParserRuleCall_3() { return cEReferenceOpDefParserRuleCall_3; }
	}

	public class EPackageOpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EPackageOpDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarPackageParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpChangePackageKeyword_1_0_0_0 = (Keyword)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOpAddPackageKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cOpDeletePackageKeyword_1_0_2_0 = (Keyword)cOpAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRefPackageParserRuleCall_1_2_0 = (RuleCall)cRefAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cPackageKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cWhereKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Alternatives cAlternatives_1_8 = (Alternatives)cGroup_1.eContents().get(8);
		private final Assignment cSettersAssignment_1_8_0 = (Assignment)cAlternatives_1_8.eContents().get(0);
		private final RuleCall cSettersSetterDefParserRuleCall_1_8_0_0 = (RuleCall)cSettersAssignment_1_8_0.eContents().get(0);
		private final Assignment cClassesAssignment_1_8_1 = (Assignment)cAlternatives_1_8.eContents().get(1);
		private final RuleCall cClassesEClassOpDefParserRuleCall_1_8_1_0 = (RuleCall)cClassesAssignment_1_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		
		//EPackageOpDef:
		//	("package" var=Package "=") ((op="changePackage" | op="addPackage" | op="deletePackage") "(" ref=Package ":" "package"
		//	")" "where" "{" (setters+=setterDef | classes+=EClassOpDef)* "}") //|complex+=CallOperator
		//;
		public ParserRule getRule() { return rule; }

		//("package" var=Package "=") ((op="changePackage" | op="addPackage" | op="deletePackage") "(" ref=Package ":" "package"
		//")" "where" "{" (setters+=setterDef | classes+=EClassOpDef)* "}") //|complex+=CallOperator
		public Group getGroup() { return cGroup; }

		//"package" var=Package "="
		public Group getGroup_0() { return cGroup_0; }

		//"package"
		public Keyword getPackageKeyword_0_0() { return cPackageKeyword_0_0; }

		//var=Package
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Package
		public RuleCall getVarPackageParserRuleCall_0_1_0() { return cVarPackageParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//(op="changePackage" | op="addPackage" | op="deletePackage") "(" ref=Package ":" "package" ")" "where" "{"
		//(setters+=setterDef | classes+=EClassOpDef)* "}"
		public Group getGroup_1() { return cGroup_1; }

		//op="changePackage" | op="addPackage" | op="deletePackage"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op="changePackage"
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//"changePackage"
		public Keyword getOpChangePackageKeyword_1_0_0_0() { return cOpChangePackageKeyword_1_0_0_0; }

		//op="addPackage"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"addPackage"
		public Keyword getOpAddPackageKeyword_1_0_1_0() { return cOpAddPackageKeyword_1_0_1_0; }

		//op="deletePackage"
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }

		//"deletePackage"
		public Keyword getOpDeletePackageKeyword_1_0_2_0() { return cOpDeletePackageKeyword_1_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//ref=Package
		public Assignment getRefAssignment_1_2() { return cRefAssignment_1_2; }

		//Package
		public RuleCall getRefPackageParserRuleCall_1_2_0() { return cRefPackageParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//"package"
		public Keyword getPackageKeyword_1_4() { return cPackageKeyword_1_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//"where"
		public Keyword getWhereKeyword_1_6() { return cWhereKeyword_1_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_7() { return cLeftCurlyBracketKeyword_1_7; }

		//(setters+=setterDef | classes+=EClassOpDef)*
		public Alternatives getAlternatives_1_8() { return cAlternatives_1_8; }

		//setters+=setterDef
		public Assignment getSettersAssignment_1_8_0() { return cSettersAssignment_1_8_0; }

		//setterDef
		public RuleCall getSettersSetterDefParserRuleCall_1_8_0_0() { return cSettersSetterDefParserRuleCall_1_8_0_0; }

		//classes+=EClassOpDef
		public Assignment getClassesAssignment_1_8_1() { return cClassesAssignment_1_8_1; }

		//EClassOpDef
		public RuleCall getClassesEClassOpDefParserRuleCall_1_8_1_0() { return cClassesEClassOpDefParserRuleCall_1_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_9() { return cRightCurlyBracketKeyword_1_9; }
	}

	public class EClassOpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EClassOpDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarClassParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cOpChangeClassKeyword_1_0_0_0 = (Keyword)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOpAddClassKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final Keyword cOpDeleteClassKeyword_1_0_2_0 = (Keyword)cOpAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRefAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRefClassParserRuleCall_1_2_0 = (RuleCall)cRefAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cClassKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cWhereKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Alternatives cAlternatives_1_7_1 = (Alternatives)cGroup_1_7.eContents().get(1);
		private final Assignment cSettersAssignment_1_7_1_0 = (Assignment)cAlternatives_1_7_1.eContents().get(0);
		private final RuleCall cSettersSetterDefParserRuleCall_1_7_1_0_0 = (RuleCall)cSettersAssignment_1_7_1_0.eContents().get(0);
		private final Assignment cAttributesAssignment_1_7_1_1 = (Assignment)cAlternatives_1_7_1.eContents().get(1);
		private final RuleCall cAttributesEAttributeOpDefParserRuleCall_1_7_1_1_0 = (RuleCall)cAttributesAssignment_1_7_1_1.eContents().get(0);
		private final Assignment cReferencesAssignment_1_7_1_2 = (Assignment)cAlternatives_1_7_1.eContents().get(2);
		private final RuleCall cReferencesEReferenceOpDefParserRuleCall_1_7_1_2_0 = (RuleCall)cReferencesAssignment_1_7_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_7_2 = (Keyword)cGroup_1_7.eContents().get(2);
		
		//EClassOpDef:
		//	("class" var=Class "=") ((op="changeClass" | op="addClass" | op="deleteClass") "(" ref=Class ":" "class" ")" "where"
		//	("{" (setters+=setterDef | attributes+=EAttributeOpDef | references+=EReferenceOpDef)* "}")) //|complex+=CallOperator
		//;
		public ParserRule getRule() { return rule; }

		//("class" var=Class "=") ((op="changeClass" | op="addClass" | op="deleteClass") "(" ref=Class ":" "class" ")" "where"
		//("{" (setters+=setterDef | attributes+=EAttributeOpDef | references+=EReferenceOpDef)* "}")) //|complex+=CallOperator
		public Group getGroup() { return cGroup; }

		//"class" var=Class "="
		public Group getGroup_0() { return cGroup_0; }

		//"class"
		public Keyword getClassKeyword_0_0() { return cClassKeyword_0_0; }

		//var=Class
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Class
		public RuleCall getVarClassParserRuleCall_0_1_0() { return cVarClassParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//(op="changeClass" | op="addClass" | op="deleteClass") "(" ref=Class ":" "class" ")" "where" ("{" (setters+=setterDef |
		//attributes+=EAttributeOpDef | references+=EReferenceOpDef)* "}")
		public Group getGroup_1() { return cGroup_1; }

		//op="changeClass" | op="addClass" | op="deleteClass"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//op="changeClass"
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }

		//"changeClass"
		public Keyword getOpChangeClassKeyword_1_0_0_0() { return cOpChangeClassKeyword_1_0_0_0; }

		//op="addClass"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"addClass"
		public Keyword getOpAddClassKeyword_1_0_1_0() { return cOpAddClassKeyword_1_0_1_0; }

		//op="deleteClass"
		public Assignment getOpAssignment_1_0_2() { return cOpAssignment_1_0_2; }

		//"deleteClass"
		public Keyword getOpDeleteClassKeyword_1_0_2_0() { return cOpDeleteClassKeyword_1_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//ref=Class
		public Assignment getRefAssignment_1_2() { return cRefAssignment_1_2; }

		//Class
		public RuleCall getRefClassParserRuleCall_1_2_0() { return cRefClassParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//"class"
		public Keyword getClassKeyword_1_4() { return cClassKeyword_1_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//"where"
		public Keyword getWhereKeyword_1_6() { return cWhereKeyword_1_6; }

		//"{" (setters+=setterDef | attributes+=EAttributeOpDef | references+=EReferenceOpDef)* "}"
		public Group getGroup_1_7() { return cGroup_1_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_7_0() { return cLeftCurlyBracketKeyword_1_7_0; }

		//(setters+=setterDef | attributes+=EAttributeOpDef | references+=EReferenceOpDef)*
		public Alternatives getAlternatives_1_7_1() { return cAlternatives_1_7_1; }

		//setters+=setterDef
		public Assignment getSettersAssignment_1_7_1_0() { return cSettersAssignment_1_7_1_0; }

		//setterDef
		public RuleCall getSettersSetterDefParserRuleCall_1_7_1_0_0() { return cSettersSetterDefParserRuleCall_1_7_1_0_0; }

		//attributes+=EAttributeOpDef
		public Assignment getAttributesAssignment_1_7_1_1() { return cAttributesAssignment_1_7_1_1; }

		//EAttributeOpDef
		public RuleCall getAttributesEAttributeOpDefParserRuleCall_1_7_1_1_0() { return cAttributesEAttributeOpDefParserRuleCall_1_7_1_1_0; }

		//references+=EReferenceOpDef
		public Assignment getReferencesAssignment_1_7_1_2() { return cReferencesAssignment_1_7_1_2; }

		//EReferenceOpDef
		public RuleCall getReferencesEReferenceOpDefParserRuleCall_1_7_1_2_0() { return cReferencesEReferenceOpDefParserRuleCall_1_7_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_7_2() { return cRightCurlyBracketKeyword_1_7_2; }
	}

	public class EAttributeOpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EAttributeOpDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarAttributeParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpChangeEAttributeKeyword_1_0_0_0_0 = (Keyword)cOpAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpAddEAttributeKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_2 = (Assignment)cAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOpDeleteEAttributeKeyword_1_0_0_2_0 = (Keyword)cOpAssignment_1_0_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRefAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRefAttributeParserRuleCall_1_0_2_0 = (RuleCall)cRefAssignment_1_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cAttributeKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cWhereKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cAlternatives_1_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3_0_0 = (Keyword)cGroup_1_3_0.eContents().get(0);
		private final Assignment cSettersAssignment_1_3_0_1 = (Assignment)cGroup_1_3_0.eContents().get(1);
		private final RuleCall cSettersSetterDefParserRuleCall_1_3_0_1_0 = (RuleCall)cSettersAssignment_1_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_0_2 = (Keyword)cGroup_1_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_3_1 = (Keyword)cAlternatives_1_3.eContents().get(1);
		
		//EAttributeOpDef:
		//	("attribute" var=Attribute "=") (((op="changeEAttribute" | op="addEAttribute" | op="deleteEAttribute") "("
		//	ref=Attribute ":" "attribute") ")" "where" ("{" setters+=setterDef* "}" | ";")) //|complex+=CallOperator
		//;
		public ParserRule getRule() { return rule; }

		//("attribute" var=Attribute "=") (((op="changeEAttribute" | op="addEAttribute" | op="deleteEAttribute") "(" ref=Attribute
		//":" "attribute") ")" "where" ("{" setters+=setterDef* "}" | ";")) //|complex+=CallOperator
		public Group getGroup() { return cGroup; }

		//"attribute" var=Attribute "="
		public Group getGroup_0() { return cGroup_0; }

		//"attribute"
		public Keyword getAttributeKeyword_0_0() { return cAttributeKeyword_0_0; }

		//var=Attribute
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Attribute
		public RuleCall getVarAttributeParserRuleCall_0_1_0() { return cVarAttributeParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//((op="changeEAttribute" | op="addEAttribute" | op="deleteEAttribute") "(" ref=Attribute ":" "attribute") ")" "where"
		//("{" setters+=setterDef* "}" | ";")
		public Group getGroup_1() { return cGroup_1; }

		//(op="changeEAttribute" | op="addEAttribute" | op="deleteEAttribute") "(" ref=Attribute ":" "attribute"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//op="changeEAttribute" | op="addEAttribute" | op="deleteEAttribute"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//op="changeEAttribute"
		public Assignment getOpAssignment_1_0_0_0() { return cOpAssignment_1_0_0_0; }

		//"changeEAttribute"
		public Keyword getOpChangeEAttributeKeyword_1_0_0_0_0() { return cOpChangeEAttributeKeyword_1_0_0_0_0; }

		//op="addEAttribute"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"addEAttribute"
		public Keyword getOpAddEAttributeKeyword_1_0_0_1_0() { return cOpAddEAttributeKeyword_1_0_0_1_0; }

		//op="deleteEAttribute"
		public Assignment getOpAssignment_1_0_0_2() { return cOpAssignment_1_0_0_2; }

		//"deleteEAttribute"
		public Keyword getOpDeleteEAttributeKeyword_1_0_0_2_0() { return cOpDeleteEAttributeKeyword_1_0_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//ref=Attribute
		public Assignment getRefAssignment_1_0_2() { return cRefAssignment_1_0_2; }

		//Attribute
		public RuleCall getRefAttributeParserRuleCall_1_0_2_0() { return cRefAttributeParserRuleCall_1_0_2_0; }

		//":"
		public Keyword getColonKeyword_1_0_3() { return cColonKeyword_1_0_3; }

		//"attribute"
		public Keyword getAttributeKeyword_1_0_4() { return cAttributeKeyword_1_0_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }

		//"where"
		public Keyword getWhereKeyword_1_2() { return cWhereKeyword_1_2; }

		//"{" setters+=setterDef* "}" | ";"
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }

		//"{" setters+=setterDef* "}"
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_0_0() { return cLeftCurlyBracketKeyword_1_3_0_0; }

		//setters+=setterDef*
		public Assignment getSettersAssignment_1_3_0_1() { return cSettersAssignment_1_3_0_1; }

		//setterDef
		public RuleCall getSettersSetterDefParserRuleCall_1_3_0_1_0() { return cSettersSetterDefParserRuleCall_1_3_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_0_2() { return cRightCurlyBracketKeyword_1_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1_3_1() { return cSemicolonKeyword_1_3_1; }
	}

	public class EReferenceOpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EReferenceOpDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cReferenceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarReferenceParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_0 = (Assignment)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpChangeEReferenceKeyword_1_0_0_0_0 = (Keyword)cOpAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cOpAddEReferenceKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_2 = (Assignment)cAlternatives_1_0_0.eContents().get(2);
		private final Keyword cOpDeleteEReferenceKeyword_1_0_0_2_0 = (Keyword)cOpAssignment_1_0_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRefAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRefReferenceParserRuleCall_1_0_2_0 = (RuleCall)cRefAssignment_1_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Keyword cReferenceKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cWhereKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cSettersAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cSettersSetterDefParserRuleCall_1_3_1_0 = (RuleCall)cSettersAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		
		//EReferenceOpDef:
		//	("reference" var=Reference "=") (((op="changeEReference" | op="addEReference" | op="deleteEReference") "("
		//	ref=Reference ":" "reference") ")" "where" ("{" setters+=setterDef* "}") //|complex+=CallOperator
		//);
		public ParserRule getRule() { return rule; }

		//("reference" var=Reference "=") (((op="changeEReference" | op="addEReference" | op="deleteEReference") "(" ref=Reference
		//":" "reference") ")" "where" ("{" setters+=setterDef* "}") //|complex+=CallOperator
		//)
		public Group getGroup() { return cGroup; }

		//"reference" var=Reference "="
		public Group getGroup_0() { return cGroup_0; }

		//"reference"
		public Keyword getReferenceKeyword_0_0() { return cReferenceKeyword_0_0; }

		//var=Reference
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Reference
		public RuleCall getVarReferenceParserRuleCall_0_1_0() { return cVarReferenceParserRuleCall_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//((op="changeEReference" | op="addEReference" | op="deleteEReference") "(" ref=Reference ":" "reference") ")" "where"
		//("{" setters+=setterDef* "}") //|complex+=CallOperator
		public Group getGroup_1() { return cGroup_1; }

		//(op="changeEReference" | op="addEReference" | op="deleteEReference") "(" ref=Reference ":" "reference"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//op="changeEReference" | op="addEReference" | op="deleteEReference"
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }

		//op="changeEReference"
		public Assignment getOpAssignment_1_0_0_0() { return cOpAssignment_1_0_0_0; }

		//"changeEReference"
		public Keyword getOpChangeEReferenceKeyword_1_0_0_0_0() { return cOpChangeEReferenceKeyword_1_0_0_0_0; }

		//op="addEReference"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"addEReference"
		public Keyword getOpAddEReferenceKeyword_1_0_0_1_0() { return cOpAddEReferenceKeyword_1_0_0_1_0; }

		//op="deleteEReference"
		public Assignment getOpAssignment_1_0_0_2() { return cOpAssignment_1_0_0_2; }

		//"deleteEReference"
		public Keyword getOpDeleteEReferenceKeyword_1_0_0_2_0() { return cOpDeleteEReferenceKeyword_1_0_0_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//ref=Reference
		public Assignment getRefAssignment_1_0_2() { return cRefAssignment_1_0_2; }

		//Reference
		public RuleCall getRefReferenceParserRuleCall_1_0_2_0() { return cRefReferenceParserRuleCall_1_0_2_0; }

		//":"
		public Keyword getColonKeyword_1_0_3() { return cColonKeyword_1_0_3; }

		//"reference"
		public Keyword getReferenceKeyword_1_0_4() { return cReferenceKeyword_1_0_4; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }

		//"where"
		public Keyword getWhereKeyword_1_2() { return cWhereKeyword_1_2; }

		//"{" setters+=setterDef* "}"
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_0() { return cLeftCurlyBracketKeyword_1_3_0; }

		//setters+=setterDef*
		public Assignment getSettersAssignment_1_3_1() { return cSettersAssignment_1_3_1; }

		//setterDef
		public RuleCall getSettersSetterDefParserRuleCall_1_3_1_0() { return cSettersSetterDefParserRuleCall_1_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_2() { return cRightCurlyBracketKeyword_1_3_2; }
	}

	public class SetterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "setterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMetafeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMetafeatureEStructuralFeatureCrossReference_1_0 = (CrossReference)cMetafeatureAssignment_1.eContents().get(0);
		private final RuleCall cMetafeatureEStructuralFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cMetafeatureEStructuralFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOperatorEqualsSignKeyword_2_0 = (Keyword)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cParAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParParameterParserRuleCall_3_0 = (RuleCall)cParAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParParameterParserRuleCall_4_1_0 = (RuleCall)cParAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//setterDef:
		//	"set" metafeature=[ecore::EStructuralFeature] operator="=" //infixOperator 
		//	par+=Parameter ("," par+=Parameter)* ";";
		public ParserRule getRule() { return rule; }

		//"set" metafeature=[ecore::EStructuralFeature] operator="=" //infixOperator 
		//par+=Parameter ("," par+=Parameter)* ";"
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//metafeature=[ecore::EStructuralFeature]
		public Assignment getMetafeatureAssignment_1() { return cMetafeatureAssignment_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getMetafeatureEStructuralFeatureCrossReference_1_0() { return cMetafeatureEStructuralFeatureCrossReference_1_0; }

		//ID
		public RuleCall getMetafeatureEStructuralFeatureIDTerminalRuleCall_1_0_1() { return cMetafeatureEStructuralFeatureIDTerminalRuleCall_1_0_1; }

		//operator="="
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//"="
		public Keyword getOperatorEqualsSignKeyword_2_0() { return cOperatorEqualsSignKeyword_2_0; }

		////infixOperator 
		//par+=Parameter
		public Assignment getParAssignment_3() { return cParAssignment_3; }

		//Parameter
		public RuleCall getParParameterParserRuleCall_3_0() { return cParParameterParserRuleCall_3_0; }

		//("," par+=Parameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//par+=Parameter
		public Assignment getParAssignment_4_1() { return cParAssignment_4_1; }

		//Parameter
		public RuleCall getParParameterParserRuleCall_4_1_0() { return cParParameterParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RewritingRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RewritingRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cMigratorsSXAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cMigratorsSXMigratorSXParserRuleCall_0_0_0 = (RuleCall)cMigratorsSXAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMigratorDXAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cMigratorDXMigratorDXParserRuleCall_0_2_0 = (RuleCall)cMigratorDXAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMigratorSXAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMigratorSXMigratorSXParserRuleCall_1_1_0 = (RuleCall)cMigratorSXAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMigratorDXAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMigratorDXMigratorDXParserRuleCall_1_3_0 = (RuleCall)cMigratorDXAssignment_1_3.eContents().get(0);
		
		//RewritingRule:
		//	(migratorsSX+=MigratorSX "->" migratorDX+=MigratorDX) ("&" migratorSX+=MigratorSX "->" migratorDX+=MigratorDX)*;
		public ParserRule getRule() { return rule; }

		//(migratorsSX+=MigratorSX "->" migratorDX+=MigratorDX) ("&" migratorSX+=MigratorSX "->" migratorDX+=MigratorDX)*
		public Group getGroup() { return cGroup; }

		//migratorsSX+=MigratorSX "->" migratorDX+=MigratorDX
		public Group getGroup_0() { return cGroup_0; }

		//migratorsSX+=MigratorSX
		public Assignment getMigratorsSXAssignment_0_0() { return cMigratorsSXAssignment_0_0; }

		//MigratorSX
		public RuleCall getMigratorsSXMigratorSXParserRuleCall_0_0_0() { return cMigratorsSXMigratorSXParserRuleCall_0_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_1() { return cHyphenMinusGreaterThanSignKeyword_0_1; }

		//migratorDX+=MigratorDX
		public Assignment getMigratorDXAssignment_0_2() { return cMigratorDXAssignment_0_2; }

		//MigratorDX
		public RuleCall getMigratorDXMigratorDXParserRuleCall_0_2_0() { return cMigratorDXMigratorDXParserRuleCall_0_2_0; }

		//("&" migratorSX+=MigratorSX "->" migratorDX+=MigratorDX)*
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//migratorSX+=MigratorSX
		public Assignment getMigratorSXAssignment_1_1() { return cMigratorSXAssignment_1_1; }

		//MigratorSX
		public RuleCall getMigratorSXMigratorSXParserRuleCall_1_1_0() { return cMigratorSXMigratorSXParserRuleCall_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }

		//migratorDX+=MigratorDX
		public Assignment getMigratorDXAssignment_1_3() { return cMigratorDXAssignment_1_3; }

		//MigratorDX
		public RuleCall getMigratorDXMigratorDXParserRuleCall_1_3_0() { return cMigratorDXMigratorDXParserRuleCall_1_3_0; }
	}

	public class MigratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Migrator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMigratorSXParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMigratorDXParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Migrator:
		//	MigratorSX | MigratorDX;
		public ParserRule getRule() { return rule; }

		//MigratorSX | MigratorDX
		public Alternatives getAlternatives() { return cAlternatives; }

		//MigratorSX
		public RuleCall getMigratorSXParserRuleCall_0() { return cMigratorSXParserRuleCall_0; }

		//MigratorDX
		public RuleCall getMigratorDXParserRuleCall_1() { return cMigratorDXParserRuleCall_1; }
	}

	public class MigratorSXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MigratorSX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMigratorSXAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariableDeclarationParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementSXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cElementSXEClassCrossReference_3_0 = (CrossReference)cElementSXAssignment_3.eContents().get(0);
		private final RuleCall cElementSXEClassIDTerminalRuleCall_3_0_1 = (RuleCall)cElementSXEClassCrossReference_3_0.eContents().get(1);
		private final Keyword cWhereKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFilterSXAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFilterSXFilterMigratorParserRuleCall_6_0 = (RuleCall)cFilterSXAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAmpersandKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFilterSXAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFilterSXFilterMigratorParserRuleCall_7_1_0 = (RuleCall)cFilterSXAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//MigratorSX:
		//	{MigratorSX} name=VariableDeclaration ":" elementSX=[ecore::EClass] "where" "[" filterSX+=FilterMigrator ("&"
		//	filterSX+=FilterMigrator)* "]";
		public ParserRule getRule() { return rule; }

		//{MigratorSX} name=VariableDeclaration ":" elementSX=[ecore::EClass] "where" "[" filterSX+=FilterMigrator ("&"
		//filterSX+=FilterMigrator)* "]"
		public Group getGroup() { return cGroup; }

		//{MigratorSX}
		public Action getMigratorSXAction_0() { return cMigratorSXAction_0; }

		//name=VariableDeclaration
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VariableDeclaration
		public RuleCall getNameVariableDeclarationParserRuleCall_1_0() { return cNameVariableDeclarationParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//elementSX=[ecore::EClass]
		public Assignment getElementSXAssignment_3() { return cElementSXAssignment_3; }

		//[ecore::EClass]
		public CrossReference getElementSXEClassCrossReference_3_0() { return cElementSXEClassCrossReference_3_0; }

		//ID
		public RuleCall getElementSXEClassIDTerminalRuleCall_3_0_1() { return cElementSXEClassIDTerminalRuleCall_3_0_1; }

		//"where"
		public Keyword getWhereKeyword_4() { return cWhereKeyword_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//filterSX+=FilterMigrator
		public Assignment getFilterSXAssignment_6() { return cFilterSXAssignment_6; }

		//FilterMigrator
		public RuleCall getFilterSXFilterMigratorParserRuleCall_6_0() { return cFilterSXFilterMigratorParserRuleCall_6_0; }

		//("&" filterSX+=FilterMigrator)*
		public Group getGroup_7() { return cGroup_7; }

		//"&"
		public Keyword getAmpersandKeyword_7_0() { return cAmpersandKeyword_7_0; }

		//filterSX+=FilterMigrator
		public Assignment getFilterSXAssignment_7_1() { return cFilterSXAssignment_7_1; }

		//FilterMigrator
		public RuleCall getFilterSXFilterMigratorParserRuleCall_7_1_0() { return cFilterSXFilterMigratorParserRuleCall_7_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}

	public class MigratorDXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MigratorDX");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMigratorDXAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cElementDXAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final CrossReference cElementDXEClassCrossReference_0_1_2_0 = (CrossReference)cElementDXAssignment_0_1_2.eContents().get(0);
		private final RuleCall cElementDXEClassIDTerminalRuleCall_0_1_2_0_1 = (RuleCall)cElementDXEClassCrossReference_0_1_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cFilterDXAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cFilterDXFilterMigratorParserRuleCall_0_1_4_0 = (RuleCall)cFilterDXAssignment_0_1_4.eContents().get(0);
		private final Group cGroup_0_1_5 = (Group)cGroup_0_1.eContents().get(5);
		private final Keyword cAmpersandKeyword_0_1_5_0 = (Keyword)cGroup_0_1_5.eContents().get(0);
		private final Assignment cFilterDXAssignment_0_1_5_1 = (Assignment)cGroup_0_1_5.eContents().get(1);
		private final RuleCall cFilterDXFilterMigratorParserRuleCall_0_1_5_1_0 = (RuleCall)cFilterDXAssignment_0_1_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_6 = (Keyword)cGroup_0_1.eContents().get(6);
		private final Keyword cNullKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MigratorDX:
		//	{MigratorDX} (name=ID ":" elementDX=[ecore::EClass] "[" filterDX+=FilterMigrator ("&" filterDX+=FilterMigrator)* "]")
		//	| "null";
		public ParserRule getRule() { return rule; }

		//{MigratorDX} (name=ID ":" elementDX=[ecore::EClass] "[" filterDX+=FilterMigrator ("&" filterDX+=FilterMigrator)* "]") |
		//"null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{MigratorDX} (name=ID ":" elementDX=[ecore::EClass] "[" filterDX+=FilterMigrator ("&" filterDX+=FilterMigrator)* "]")
		public Group getGroup_0() { return cGroup_0; }

		//{MigratorDX}
		public Action getMigratorDXAction_0_0() { return cMigratorDXAction_0_0; }

		//name=ID ":" elementDX=[ecore::EClass] "[" filterDX+=FilterMigrator ("&" filterDX+=FilterMigrator)* "]"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0_0() { return cNameIDTerminalRuleCall_0_1_0_0; }

		//":"
		public Keyword getColonKeyword_0_1_1() { return cColonKeyword_0_1_1; }

		//elementDX=[ecore::EClass]
		public Assignment getElementDXAssignment_0_1_2() { return cElementDXAssignment_0_1_2; }

		//[ecore::EClass]
		public CrossReference getElementDXEClassCrossReference_0_1_2_0() { return cElementDXEClassCrossReference_0_1_2_0; }

		//ID
		public RuleCall getElementDXEClassIDTerminalRuleCall_0_1_2_0_1() { return cElementDXEClassIDTerminalRuleCall_0_1_2_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_3() { return cLeftSquareBracketKeyword_0_1_3; }

		//filterDX+=FilterMigrator
		public Assignment getFilterDXAssignment_0_1_4() { return cFilterDXAssignment_0_1_4; }

		//FilterMigrator
		public RuleCall getFilterDXFilterMigratorParserRuleCall_0_1_4_0() { return cFilterDXFilterMigratorParserRuleCall_0_1_4_0; }

		//("&" filterDX+=FilterMigrator)*
		public Group getGroup_0_1_5() { return cGroup_0_1_5; }

		//"&"
		public Keyword getAmpersandKeyword_0_1_5_0() { return cAmpersandKeyword_0_1_5_0; }

		//filterDX+=FilterMigrator
		public Assignment getFilterDXAssignment_0_1_5_1() { return cFilterDXAssignment_0_1_5_1; }

		//FilterMigrator
		public RuleCall getFilterDXFilterMigratorParserRuleCall_0_1_5_1_0() { return cFilterDXFilterMigratorParserRuleCall_0_1_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_6() { return cRightSquareBracketKeyword_0_1_6; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class FilterMigratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FilterMigrator");
		private final Assignment cSpecificationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpecificationOclExpressionParserRuleCall_0 = (RuleCall)cSpecificationAssignment.eContents().get(0);
		
		////(featureSX=DotNavigationObjSX) op="="
		//////EssentialOCLInfixOperator   
		////(value=DotNavigationObjDX)?
		//FilterMigrator:
		//	specification=OclExpression?;
		public ParserRule getRule() { return rule; }

		//specification=OclExpression?
		public Assignment getSpecificationAssignment() { return cSpecificationAssignment; }

		//OclExpression
		public RuleCall getSpecificationOclExpressionParserRuleCall_0() { return cSpecificationOclExpressionParserRuleCall_0; }
	}

	public class DotNavigationObjSXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotNavigationObjSX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjEObjectCrossReference_1_0 = (CrossReference)cObjAssignment_1.eContents().get(0);
		private final RuleCall cObjEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cObjEObjectCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefEStructuralFeatureCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefEStructuralFeatureIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefEStructuralFeatureCrossReference_2_1_0.eContents().get(1);
		
		//DotNavigationObjSX:
		//	"#" obj=[ecore::EObject] ("." ref=[ecore::EStructuralFeature])*;
		public ParserRule getRule() { return rule; }

		//"#" obj=[ecore::EObject] ("." ref=[ecore::EStructuralFeature])*
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//obj=[ecore::EObject]
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//[ecore::EObject]
		public CrossReference getObjEObjectCrossReference_1_0() { return cObjEObjectCrossReference_1_0; }

		//ID
		public RuleCall getObjEObjectIDTerminalRuleCall_1_0_1() { return cObjEObjectIDTerminalRuleCall_1_0_1; }

		//("." ref=[ecore::EStructuralFeature])*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ref=[ecore::EStructuralFeature]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getRefEStructuralFeatureCrossReference_2_1_0() { return cRefEStructuralFeatureCrossReference_2_1_0; }

		//ID
		public RuleCall getRefEStructuralFeatureIDTerminalRuleCall_2_1_0_1() { return cRefEStructuralFeatureIDTerminalRuleCall_2_1_0_1; }
	}

	public class DotNavigationObjDXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DotNavigationObjDX");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjEObjectCrossReference_1_0 = (CrossReference)cObjAssignment_1.eContents().get(0);
		private final RuleCall cObjEObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cObjEObjectCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefEStructuralFeatureCrossReference_2_1_0 = (CrossReference)cRefAssignment_2_1.eContents().get(0);
		private final RuleCall cRefEStructuralFeatureIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRefEStructuralFeatureCrossReference_2_1_0.eContents().get(1);
		
		//DotNavigationObjDX:
		//	"#" obj=[ecore::EObject] ("." ref=[ecore::EStructuralFeature])*;
		public ParserRule getRule() { return rule; }

		//"#" obj=[ecore::EObject] ("." ref=[ecore::EStructuralFeature])*
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//obj=[ecore::EObject]
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }

		//[ecore::EObject]
		public CrossReference getObjEObjectCrossReference_1_0() { return cObjEObjectCrossReference_1_0; }

		//ID
		public RuleCall getObjEObjectIDTerminalRuleCall_1_0_1() { return cObjEObjectIDTerminalRuleCall_1_0_1; }

		//("." ref=[ecore::EStructuralFeature])*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ref=[ecore::EStructuralFeature]
		public Assignment getRefAssignment_2_1() { return cRefAssignment_2_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getRefEStructuralFeatureCrossReference_2_1_0() { return cRefEStructuralFeatureCrossReference_2_1_0; }

		//ID
		public RuleCall getRefEStructuralFeatureIDTerminalRuleCall_2_1_0_1() { return cRefEStructuralFeatureIDTerminalRuleCall_2_1_0_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	"%" name=ID;
		public ParserRule getRule() { return rule; }

		//"%" name=ID
		public Group getGroup() { return cGroup; }

		//"%"
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Package returns ecore::EPackage:
		//	{Package} name=ID;
		public ParserRule getRule() { return rule; }

		//{Package} name=ID
		public Group getGroup() { return cGroup; }

		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Class returns ecore::EClass:
		//	{Class} name=ID;
		public ParserRule getRule() { return rule; }

		//{Class} name=ID
		public Group getGroup() { return cGroup; }

		//{Class}
		public Action getClassAction_0() { return cClassAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Attribute returns ecore::EAttribute:
		//	{Attribute} name=ID;
		public ParserRule getRule() { return rule; }

		//{Attribute} name=ID
		public Group getGroup() { return cGroup; }

		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Reference returns ecore::EReference:
		//	{Reference} name=ID;
		public ParserRule getRule() { return rule; }

		//{Reference} name=ID
		public Group getGroup() { return cGroup; }

		//{Reference}
		public Action getReferenceAction_0() { return cReferenceAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class StructuralFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StructuralFeature returns ecore::EStructuralFeature:
		//	Attribute | Reference;
		public ParserRule getRule() { return rule; }

		//Attribute | Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class OclFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOclAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Ocl grammar specification
		//OclFeature returns ocl::OclFeature:
		//	OclAttribute | Operation;
		public ParserRule getRule() { return rule; }

		//OclAttribute | Operation
		public Alternatives getAlternatives() { return cAlternatives; }

		//OclAttribute
		public RuleCall getOclAttributeParserRuleCall_0() { return cOclAttributeParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }
	}

	public class OclTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOclType_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionType_ImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRealTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBagTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOrderedSetTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSequenceTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cOclAnyTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cTupleTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cOclModelElementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMapTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//OclType returns ocl::OclType:
		//	OclType_Impl | CollectionType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType |
		//	SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;
		public ParserRule getRule() { return rule; }

		//OclType_Impl | CollectionType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType |
		//SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType
		public Alternatives getAlternatives() { return cAlternatives; }

		//OclType_Impl
		public RuleCall getOclType_ImplParserRuleCall_0() { return cOclType_ImplParserRuleCall_0; }

		//CollectionType_Impl
		public RuleCall getCollectionType_ImplParserRuleCall_1() { return cCollectionType_ImplParserRuleCall_1; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_2() { return cStringTypeParserRuleCall_2; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_3() { return cBooleanTypeParserRuleCall_3; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_4() { return cIntegerTypeParserRuleCall_4; }

		//RealType
		public RuleCall getRealTypeParserRuleCall_5() { return cRealTypeParserRuleCall_5; }

		//BagType
		public RuleCall getBagTypeParserRuleCall_6() { return cBagTypeParserRuleCall_6; }

		//OrderedSetType
		public RuleCall getOrderedSetTypeParserRuleCall_7() { return cOrderedSetTypeParserRuleCall_7; }

		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_8() { return cSequenceTypeParserRuleCall_8; }

		//SetType
		public RuleCall getSetTypeParserRuleCall_9() { return cSetTypeParserRuleCall_9; }

		//OclAnyType
		public RuleCall getOclAnyTypeParserRuleCall_10() { return cOclAnyTypeParserRuleCall_10; }

		//TupleType
		public RuleCall getTupleTypeParserRuleCall_11() { return cTupleTypeParserRuleCall_11; }

		//OclModelElement
		public RuleCall getOclModelElementParserRuleCall_12() { return cOclModelElementParserRuleCall_12; }

		//MapType
		public RuleCall getMapTypeParserRuleCall_13() { return cMapTypeParserRuleCall_13; }
	}

	public class OclExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableExpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSuperExpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringExpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanExpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRealExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBagExpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOrderedSetExpParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSequenceExpParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetExpParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTupleExpParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cMapExpParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cEnumLiteralExpParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cOclUndefinedExpParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cOperatorCallExpParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cCollectionOperationCallExpParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cIterateExpParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cIteratorExpParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cLetExpParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cIfExpParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cCollectionType_ImplParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cOclType_ImplParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cStringTypeParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cBooleanTypeParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cIntegerTypeParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cRealTypeParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cBagTypeParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cOrderedSetTypeParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cSequenceTypeParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cSetTypeParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		private final RuleCall cOclAnyTypeParserRuleCall_30 = (RuleCall)cAlternatives.eContents().get(30);
		private final RuleCall cTupleTypeParserRuleCall_31 = (RuleCall)cAlternatives.eContents().get(31);
		private final RuleCall cOclModelElementParserRuleCall_32 = (RuleCall)cAlternatives.eContents().get(32);
		private final RuleCall cMapTypeParserRuleCall_33 = (RuleCall)cAlternatives.eContents().get(33);
		private final Group cGroup_34 = (Group)cAlternatives.eContents().get(34);
		private final RuleCall cNavigationOrAttributeCallExpParserRuleCall_34_0 = (RuleCall)cGroup_34.eContents().get(0);
		private final Action cNavigationOrAttributeCallExpSrcAction_34_1 = (Action)cGroup_34.eContents().get(1);
		
		//OclExpression returns ocl::OclExpression:
		//	VariableExp | SuperExp | StringExp | BooleanExp | RealExp | IntegerExp | BagExp | OrderedSetExp | SequenceExp | SetExp
		//	| TupleExp | MapExp | EnumLiteralExp | OclUndefinedExp | OperatorCallExp | CollectionOperationCallExp | IterateExp |
		//	IteratorExp | LetExp | IfExp | CollectionType_Impl | OclType_Impl | StringType | BooleanType | IntegerType | RealType
		//	| BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType |
		//	NavigationOrAttributeCallExp {NavigationOrAttributeCallExp.src=current};
		public ParserRule getRule() { return rule; }

		//VariableExp | SuperExp | StringExp | BooleanExp | RealExp | IntegerExp | BagExp | OrderedSetExp | SequenceExp | SetExp |
		//TupleExp | MapExp | EnumLiteralExp | OclUndefinedExp | OperatorCallExp | CollectionOperationCallExp | IterateExp |
		//IteratorExp | LetExp | IfExp | CollectionType_Impl | OclType_Impl | StringType | BooleanType | IntegerType | RealType |
		//BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType |
		//NavigationOrAttributeCallExp {NavigationOrAttributeCallExp.src=current}
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableExp
		public RuleCall getVariableExpParserRuleCall_0() { return cVariableExpParserRuleCall_0; }

		//SuperExp
		public RuleCall getSuperExpParserRuleCall_1() { return cSuperExpParserRuleCall_1; }

		//StringExp
		public RuleCall getStringExpParserRuleCall_2() { return cStringExpParserRuleCall_2; }

		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall_3() { return cBooleanExpParserRuleCall_3; }

		//RealExp
		public RuleCall getRealExpParserRuleCall_4() { return cRealExpParserRuleCall_4; }

		//IntegerExp
		public RuleCall getIntegerExpParserRuleCall_5() { return cIntegerExpParserRuleCall_5; }

		//BagExp
		public RuleCall getBagExpParserRuleCall_6() { return cBagExpParserRuleCall_6; }

		//OrderedSetExp
		public RuleCall getOrderedSetExpParserRuleCall_7() { return cOrderedSetExpParserRuleCall_7; }

		//SequenceExp
		public RuleCall getSequenceExpParserRuleCall_8() { return cSequenceExpParserRuleCall_8; }

		//SetExp
		public RuleCall getSetExpParserRuleCall_9() { return cSetExpParserRuleCall_9; }

		//TupleExp
		public RuleCall getTupleExpParserRuleCall_10() { return cTupleExpParserRuleCall_10; }

		//MapExp
		public RuleCall getMapExpParserRuleCall_11() { return cMapExpParserRuleCall_11; }

		//EnumLiteralExp
		public RuleCall getEnumLiteralExpParserRuleCall_12() { return cEnumLiteralExpParserRuleCall_12; }

		//OclUndefinedExp
		public RuleCall getOclUndefinedExpParserRuleCall_13() { return cOclUndefinedExpParserRuleCall_13; }

		//OperatorCallExp
		public RuleCall getOperatorCallExpParserRuleCall_14() { return cOperatorCallExpParserRuleCall_14; }

		//CollectionOperationCallExp
		public RuleCall getCollectionOperationCallExpParserRuleCall_15() { return cCollectionOperationCallExpParserRuleCall_15; }

		//IterateExp
		public RuleCall getIterateExpParserRuleCall_16() { return cIterateExpParserRuleCall_16; }

		//IteratorExp
		public RuleCall getIteratorExpParserRuleCall_17() { return cIteratorExpParserRuleCall_17; }

		//LetExp
		public RuleCall getLetExpParserRuleCall_18() { return cLetExpParserRuleCall_18; }

		//IfExp
		public RuleCall getIfExpParserRuleCall_19() { return cIfExpParserRuleCall_19; }

		//CollectionType_Impl
		public RuleCall getCollectionType_ImplParserRuleCall_20() { return cCollectionType_ImplParserRuleCall_20; }

		//OclType_Impl
		public RuleCall getOclType_ImplParserRuleCall_21() { return cOclType_ImplParserRuleCall_21; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_22() { return cStringTypeParserRuleCall_22; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_23() { return cBooleanTypeParserRuleCall_23; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_24() { return cIntegerTypeParserRuleCall_24; }

		//RealType
		public RuleCall getRealTypeParserRuleCall_25() { return cRealTypeParserRuleCall_25; }

		//BagType
		public RuleCall getBagTypeParserRuleCall_26() { return cBagTypeParserRuleCall_26; }

		//OrderedSetType
		public RuleCall getOrderedSetTypeParserRuleCall_27() { return cOrderedSetTypeParserRuleCall_27; }

		//SequenceType
		public RuleCall getSequenceTypeParserRuleCall_28() { return cSequenceTypeParserRuleCall_28; }

		//SetType
		public RuleCall getSetTypeParserRuleCall_29() { return cSetTypeParserRuleCall_29; }

		//OclAnyType
		public RuleCall getOclAnyTypeParserRuleCall_30() { return cOclAnyTypeParserRuleCall_30; }

		//TupleType
		public RuleCall getTupleTypeParserRuleCall_31() { return cTupleTypeParserRuleCall_31; }

		//OclModelElement
		public RuleCall getOclModelElementParserRuleCall_32() { return cOclModelElementParserRuleCall_32; }

		//MapType
		public RuleCall getMapTypeParserRuleCall_33() { return cMapTypeParserRuleCall_33; }

		//NavigationOrAttributeCallExp {NavigationOrAttributeCallExp.src=current}
		public Group getGroup_34() { return cGroup_34; }

		//NavigationOrAttributeCallExp
		public RuleCall getNavigationOrAttributeCallExpParserRuleCall_34_0() { return cNavigationOrAttributeCallExpParserRuleCall_34_0; }

		//{NavigationOrAttributeCallExp.src=current}
		public Action getNavigationOrAttributeCallExpSrcAction_34_1() { return cNavigationOrAttributeCallExpSrcAction_34_1; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclaration_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTuplePartParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIteratorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOclParameterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//VariableDeclaration returns ocl::VariableDeclaration:
		//	VariableDeclaration_Impl | TuplePart | Iterator | OclParameter;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration_Impl | TuplePart | Iterator | OclParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration_Impl
		public RuleCall getVariableDeclaration_ImplParserRuleCall_0() { return cVariableDeclaration_ImplParserRuleCall_0; }

		//TuplePart
		public RuleCall getTuplePartParserRuleCall_1() { return cTuplePartParserRuleCall_1; }

		//Iterator
		public RuleCall getIteratorParserRuleCall_2() { return cIteratorParserRuleCall_2; }

		//OclParameter
		public RuleCall getOclParameterParserRuleCall_3() { return cOclParameterParserRuleCall_3; }
	}

	public class OclFeatureDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclFeatureDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cContext_Keyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cContext_Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cContext_OclContextDefinitionParserRuleCall_0_1_0 = (RuleCall)cContext_Assignment_0_1.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureOclFeatureParserRuleCall_3_0 = (RuleCall)cFeatureAssignment_3.eContents().get(0);
		
		//OclFeatureDefinition returns ocl::OclFeatureDefinition:
		//	("context_" context_=OclContextDefinition)? "def" ":" feature=OclFeature;
		public ParserRule getRule() { return rule; }

		//("context_" context_=OclContextDefinition)? "def" ":" feature=OclFeature
		public Group getGroup() { return cGroup; }

		//("context_" context_=OclContextDefinition)?
		public Group getGroup_0() { return cGroup_0; }

		//"context_"
		public Keyword getContext_Keyword_0_0() { return cContext_Keyword_0_0; }

		//context_=OclContextDefinition
		public Assignment getContext_Assignment_0_1() { return cContext_Assignment_0_1; }

		//OclContextDefinition
		public RuleCall getContext_OclContextDefinitionParserRuleCall_0_1_0() { return cContext_OclContextDefinitionParserRuleCall_0_1_0; }

		//"def"
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//feature=OclFeature
		public Assignment getFeatureAssignment_3() { return cFeatureAssignment_3; }

		//OclFeature
		public RuleCall getFeatureOclFeatureParserRuleCall_3_0() { return cFeatureOclFeatureParserRuleCall_3_0; }
	}

	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "String0");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / String0 returns ocl::String:
		//	"String";
		public ParserRule getRule() { return rule; }

		//"String"
		public Keyword getStringKeyword() { return cStringKeyword; }
	}

	public class OclContextDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclContextDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContext_Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContext_OclTypeParserRuleCall_1_0 = (RuleCall)cContext_Assignment_1.eContents().get(0);
		
		//OclContextDefinition returns ocl::OclContextDefinition:
		//	"context" context_=OclType;
		public ParserRule getRule() { return rule; }

		//"context" context_=OclType
		public Group getGroup() { return cGroup; }

		//"context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//context_=OclType
		public Assignment getContext_Assignment_1() { return cContext_Assignment_1; }

		//OclType
		public RuleCall getContext_OclTypeParserRuleCall_1_0() { return cContext_OclTypeParserRuleCall_1_0; }
	}

	public class OclAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_4_0 = (RuleCall)cInitExpressionAssignment_4.eContents().get(0);
		
		//OclAttribute returns ocl::Attribute:
		//	name=STRING ":" type=OclType "=" initExpression=OclExpression;
		public ParserRule getRule() { return rule; }

		//name=STRING ":" type=OclType "=" initExpression=OclExpression
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=OclType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_0() { return cTypeOclTypeParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_4() { return cInitExpressionAssignment_4; }

		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_4_0() { return cInitExpressionOclExpressionParserRuleCall_4_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersOclParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersOclParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReturnTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReturnTypeOclTypeParserRuleCall_5_0 = (RuleCall)cReturnTypeAssignment_5.eContents().get(0);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyOclExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//Operation returns ocl::Operation:
		//	name=STRING "(" ("{" parameters+=OclParameter ("," parameters+=OclParameter)* "}")? ")" ":" returnType=OclType
		//	body=OclExpression;
		public ParserRule getRule() { return rule; }

		//name=STRING "(" ("{" parameters+=OclParameter ("," parameters+=OclParameter)* "}")? ")" ":" returnType=OclType
		//body=OclExpression
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//("{" parameters+=OclParameter ("," parameters+=OclParameter)* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//parameters+=OclParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//OclParameter
		public RuleCall getParametersOclParameterParserRuleCall_2_1_0() { return cParametersOclParameterParserRuleCall_2_1_0; }

		//("," parameters+=OclParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=OclParameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//OclParameter
		public RuleCall getParametersOclParameterParserRuleCall_2_2_1_0() { return cParametersOclParameterParserRuleCall_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//returnType=OclType
		public Assignment getReturnTypeAssignment_5() { return cReturnTypeAssignment_5; }

		//OclType
		public RuleCall getReturnTypeOclTypeParserRuleCall_5_0() { return cReturnTypeOclTypeParserRuleCall_5_0; }

		//body=OclExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_6_0() { return cBodyOclExpressionParserRuleCall_6_0; }
	}

	public class OclType_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclType_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOclTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//OclType_Impl returns ocl::OclType:
		//	"OclType" name=STRING ("type" type=OclType)?;
		public ParserRule getRule() { return rule; }

		//"OclType" name=STRING ("type" type=OclType)?
		public Group getGroup() { return cGroup; }

		//"OclType"
		public Keyword getOclTypeKeyword_0() { return cOclTypeKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//("type" type=OclType)?
		public Group getGroup_2() { return cGroup_2; }

		//"type"
		public Keyword getTypeKeyword_2_0() { return cTypeKeyword_2_0; }

		//type=OclType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_1_0() { return cTypeOclTypeParserRuleCall_2_1_0; }
	}

	public class VariableExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReferredVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferredVariableVariableDeclarationCrossReference_1_0 = (CrossReference)cReferredVariableAssignment_1.eContents().get(0);
		private final RuleCall cReferredVariableVariableDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cReferredVariableVariableDeclarationCrossReference_1_0.eContents().get(1);
		
		//VariableExp returns ocl::VariableExp:
		//	{VariableExp} referredVariable= //STRING
		//	[ocl::VariableDeclaration];
		public ParserRule getRule() { return rule; }

		//{VariableExp} referredVariable= //STRING
		//[ocl::VariableDeclaration]
		public Group getGroup() { return cGroup; }

		//{VariableExp}
		public Action getVariableExpAction_0() { return cVariableExpAction_0; }

		//referredVariable= //STRING
		//[ocl::VariableDeclaration]
		public Assignment getReferredVariableAssignment_1() { return cReferredVariableAssignment_1; }

		////STRING
		//[ocl::VariableDeclaration]
		public CrossReference getReferredVariableVariableDeclarationCrossReference_1_0() { return cReferredVariableVariableDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getReferredVariableVariableDeclarationIDTerminalRuleCall_1_0_1() { return cReferredVariableVariableDeclarationIDTerminalRuleCall_1_0_1; }
	}

	public class SuperExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuperExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuperExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SuperExp returns ocl::SuperExp:
		//	{SuperExp} "super";
		public ParserRule getRule() { return rule; }

		//{SuperExp} "super"
		public Group getGroup() { return cGroup; }

		//{SuperExp}
		public Action getSuperExpAction_0() { return cSuperExpAction_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}

	public class StringExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExp");
		private final Assignment cStringSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSymbolString0ParserRuleCall_0 = (RuleCall)cStringSymbolAssignment.eContents().get(0);
		
		//StringExp returns ocl::StringExp:
		//	stringSymbol=String0;
		public ParserRule getRule() { return rule; }

		//stringSymbol=String0
		public Assignment getStringSymbolAssignment() { return cStringSymbolAssignment; }

		//String0
		public RuleCall getStringSymbolString0ParserRuleCall_0() { return cStringSymbolString0ParserRuleCall_0; }
	}

	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExp");
		private final Assignment cBooleanSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBooleanSymbolBooleanParserRuleCall_0 = (RuleCall)cBooleanSymbolAssignment.eContents().get(0);
		
		//BooleanExp returns ocl::BooleanExp:
		//	booleanSymbol=Boolean;
		public ParserRule getRule() { return rule; }

		//booleanSymbol=Boolean
		public Assignment getBooleanSymbolAssignment() { return cBooleanSymbolAssignment; }

		//Boolean
		public RuleCall getBooleanSymbolBooleanParserRuleCall_0() { return cBooleanSymbolBooleanParserRuleCall_0; }
	}

	public class RealExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealExp");
		private final Assignment cRealSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRealSymbolDoubleParserRuleCall_0 = (RuleCall)cRealSymbolAssignment.eContents().get(0);
		
		//RealExp returns ocl::RealExp:
		//	realSymbol=Double;
		public ParserRule getRule() { return rule; }

		//realSymbol=Double
		public Assignment getRealSymbolAssignment() { return cRealSymbolAssignment; }

		//Double
		public RuleCall getRealSymbolDoubleParserRuleCall_0() { return cRealSymbolDoubleParserRuleCall_0; }
	}

	public class IntegerExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerExp");
		private final Assignment cIntegerSymbolAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntegerSymbolIntegerParserRuleCall_0 = (RuleCall)cIntegerSymbolAssignment.eContents().get(0);
		
		//IntegerExp returns ocl::IntegerExp:
		//	integerSymbol=Integer;
		public ParserRule getRule() { return rule; }

		//integerSymbol=Integer
		public Assignment getIntegerSymbolAssignment() { return cIntegerSymbolAssignment; }

		//Integer
		public RuleCall getIntegerSymbolIntegerParserRuleCall_0() { return cIntegerSymbolIntegerParserRuleCall_0; }
	}

	public class BagExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BagExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBagExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_2_1_0 = (RuleCall)cElementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BagExp returns ocl::BagExp:
		//	{BagExp} "Bag" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{BagExp} "Bag" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{BagExp}
		public Action getBagExpAction_0() { return cBagExpAction_0; }

		//"Bag"
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("{" elements+=OclExpression ("," elements+=OclExpression)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_0() { return cElementsOclExpressionParserRuleCall_3_1_0; }

		//("," elements+=OclExpression)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_2_1() { return cElementsAssignment_3_2_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_2_1_0() { return cElementsOclExpressionParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OrderedSetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderedSetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrderedSetExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrderedSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_2_1_0 = (RuleCall)cElementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OrderedSetExp returns ocl::OrderedSetExp:
		//	{OrderedSetExp} "OrderedSet" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{OrderedSetExp} "OrderedSet" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{OrderedSetExp}
		public Action getOrderedSetExpAction_0() { return cOrderedSetExpAction_0; }

		//"OrderedSet"
		public Keyword getOrderedSetKeyword_1() { return cOrderedSetKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("{" elements+=OclExpression ("," elements+=OclExpression)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_0() { return cElementsOclExpressionParserRuleCall_3_1_0; }

		//("," elements+=OclExpression)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_2_1() { return cElementsAssignment_3_2_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_2_1_0() { return cElementsOclExpressionParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SequenceExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_2_1_0 = (RuleCall)cElementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceExp returns ocl::SequenceExp:
		//	{SequenceExp} "Sequence" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{SequenceExp} "Sequence" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{SequenceExp}
		public Action getSequenceExpAction_0() { return cSequenceExpAction_0; }

		//"Sequence"
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("{" elements+=OclExpression ("," elements+=OclExpression)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_0() { return cElementsOclExpressionParserRuleCall_3_1_0; }

		//("," elements+=OclExpression)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_2_1() { return cElementsAssignment_3_2_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_2_1_0() { return cElementsOclExpressionParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElementsOclExpressionParserRuleCall_3_2_1_0 = (RuleCall)cElementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetExp returns ocl::SetExp:
		//	{SetExp} "Set" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{SetExp} "Set" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{SetExp}
		public Action getSetExpAction_0() { return cSetExpAction_0; }

		//"Set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("{" elements+=OclExpression ("," elements+=OclExpression)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_1_0() { return cElementsOclExpressionParserRuleCall_3_1_0; }

		//("," elements+=OclExpression)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//elements+=OclExpression
		public Assignment getElementsAssignment_3_2_1() { return cElementsAssignment_3_2_1; }

		//OclExpression
		public RuleCall getElementsOclExpressionParserRuleCall_3_2_1_0() { return cElementsOclExpressionParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TupleExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTupleExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTupleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTuplePartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTuplePartTuplePartParserRuleCall_3_1_0 = (RuleCall)cTuplePartAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTuplePartAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTuplePartTuplePartParserRuleCall_3_2_1_0 = (RuleCall)cTuplePartAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TupleExp returns ocl::TupleExp:
		//	{TupleExp} "Tuple" "{" ("{" tuplePart+=TuplePart ("," tuplePart+=TuplePart)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{TupleExp} "Tuple" "{" ("{" tuplePart+=TuplePart ("," tuplePart+=TuplePart)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{TupleExp}
		public Action getTupleExpAction_0() { return cTupleExpAction_0; }

		//"Tuple"
		public Keyword getTupleKeyword_1() { return cTupleKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("{" tuplePart+=TuplePart ("," tuplePart+=TuplePart)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//tuplePart+=TuplePart
		public Assignment getTuplePartAssignment_3_1() { return cTuplePartAssignment_3_1; }

		//TuplePart
		public RuleCall getTuplePartTuplePartParserRuleCall_3_1_0() { return cTuplePartTuplePartParserRuleCall_3_1_0; }

		//("," tuplePart+=TuplePart)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//tuplePart+=TuplePart
		public Assignment getTuplePartAssignment_3_2_1() { return cTuplePartAssignment_3_2_1; }

		//TuplePart
		public RuleCall getTuplePartTuplePartParserRuleCall_3_2_1_0() { return cTuplePartTuplePartParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MapExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMapExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsMapElementParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cElementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElementsMapElementParserRuleCall_3_2_1_0 = (RuleCall)cElementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapExp returns ocl::MapExp:
		//	{MapExp} "Map" "{" ("{" elements+=MapElement ("," elements+=MapElement)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{MapExp} "Map" "{" ("{" elements+=MapElement ("," elements+=MapElement)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{MapExp}
		public Action getMapExpAction_0() { return cMapExpAction_0; }

		//"Map"
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("{" elements+=MapElement ("," elements+=MapElement)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//elements+=MapElement
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//MapElement
		public RuleCall getElementsMapElementParserRuleCall_3_1_0() { return cElementsMapElementParserRuleCall_3_1_0; }

		//("," elements+=MapElement)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//elements+=MapElement
		public Assignment getElementsAssignment_3_2_1() { return cElementsAssignment_3_2_1; }

		//MapElement
		public RuleCall getElementsMapElementParserRuleCall_3_2_1_0() { return cElementsMapElementParserRuleCall_3_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumLiteralExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumLiteralExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////('type' type=OclType)?
		//EnumLiteralExp returns ocl::EnumLiteralExp:
		//	"#" name=STRING;
		public ParserRule getRule() { return rule; }

		//"#" name=STRING
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class OclUndefinedExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclUndefinedExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOclUndefinedExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOclUndefinedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OclUndefinedExp returns ocl::OclUndefinedExp:
		//	{OclUndefinedExp} "OclUndefined";
		public ParserRule getRule() { return rule; }

		//{OclUndefinedExp} "OclUndefined"
		public Group getGroup() { return cGroup; }

		//{OclUndefinedExp}
		public Action getOclUndefinedExpAction_0() { return cOclUndefinedExpAction_0; }

		//"OclUndefined"
		public Keyword getOclUndefinedKeyword_1() { return cOclUndefinedKeyword_1; }
	}

	public class NavigationOrAttributeCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigationOrAttributeCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNavigationOrAttributeCallExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//NavigationOrAttributeCallExp returns ocl::OclExpression:
		//	{ocl::NavigationOrAttributeCallExp} "." name=ID;
		public ParserRule getRule() { return rule; }

		//{ocl::NavigationOrAttributeCallExp} "." name=ID
		public Group getGroup() { return cGroup; }

		//{ocl::NavigationOrAttributeCallExp}
		public Action getNavigationOrAttributeCallExpAction_0() { return cNavigationOrAttributeCallExpAction_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class OperationCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationNameIDTerminalRuleCall_0_0 = (RuleCall)cOperationNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////'source' source=OclExpression
		//OperationCallExp returns ocl::OperationCallExp:
		//	operationName=ID "(" arguments+=OclExpression ("," arguments+=OclExpression)* ")";
		public ParserRule getRule() { return rule; }

		//operationName=ID "(" arguments+=OclExpression ("," arguments+=OclExpression)* ")"
		public Group getGroup() { return cGroup; }

		//operationName=ID
		public Assignment getOperationNameAssignment_0() { return cOperationNameAssignment_0; }

		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_0_0() { return cOperationNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_2_0() { return cArgumentsOclExpressionParserRuleCall_2_0; }

		//("," arguments+=OclExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }

		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OperatorCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationNameString0ParserRuleCall_0_0 = (RuleCall)cOperationNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cArgumentsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_2_2_0 = (RuleCall)cArgumentsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_2_3_1_0 = (RuleCall)cArgumentsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////	'source' source=OclExpression
		//OperatorCallExp returns ocl::OperatorCallExp:
		//	operationName=String0 "(" ("arguments" "{" arguments+=OclExpression ("," arguments+=OclExpression)* "}")? ")";
		public ParserRule getRule() { return rule; }

		//operationName=String0 "(" ("arguments" "{" arguments+=OclExpression ("," arguments+=OclExpression)* "}")? ")"
		public Group getGroup() { return cGroup; }

		//operationName=String0
		public Assignment getOperationNameAssignment_0() { return cOperationNameAssignment_0; }

		//String0
		public RuleCall getOperationNameString0ParserRuleCall_0_0() { return cOperationNameString0ParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//("arguments" "{" arguments+=OclExpression ("," arguments+=OclExpression)* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"arguments"
		public Keyword getArgumentsKeyword_2_0() { return cArgumentsKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_2_2() { return cArgumentsAssignment_2_2; }

		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_2_2_0() { return cArgumentsOclExpressionParserRuleCall_2_2_0; }

		//("," arguments+=OclExpression)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_2_3_1() { return cArgumentsAssignment_2_3_1; }

		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_2_3_1_0() { return cArgumentsOclExpressionParserRuleCall_2_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CollectionOperationCallExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionOperationCallExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationNameIDTerminalRuleCall_0_0 = (RuleCall)cOperationNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsOclExpressionParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////'source' source=OclExpression
		//CollectionOperationCallExp returns ocl::CollectionOperationCallExp:
		//	operationName=ID "(" arguments+=OclExpression ("," arguments+=OclExpression)* ")";
		public ParserRule getRule() { return rule; }

		//operationName=ID "(" arguments+=OclExpression ("," arguments+=OclExpression)* ")"
		public Group getGroup() { return cGroup; }

		//operationName=ID
		public Assignment getOperationNameAssignment_0() { return cOperationNameAssignment_0; }

		//ID
		public RuleCall getOperationNameIDTerminalRuleCall_0_0() { return cOperationNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_2_0() { return cArgumentsOclExpressionParserRuleCall_2_0; }

		//("," arguments+=OclExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//arguments+=OclExpression
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }

		//OclExpression
		public RuleCall getArgumentsOclExpressionParserRuleCall_3_1_0() { return cArgumentsOclExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IterateExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterateExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIterateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIteratorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIteratorsIteratorParserRuleCall_2_0_0 = (RuleCall)cIteratorsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIteratorsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_2_1_1_0 = (RuleCall)cIteratorsAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResultVariableDeclarationParserRuleCall_4_0 = (RuleCall)cResultAssignment_4.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyOclExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////'source' source=OclExpression
		//IterateExp returns ocl::IterateExp:
		//	"iterate" "(" (iterators+=Iterator ("," iterators+=Iterator)*) ";" result=VariableDeclaration "|" body=OclExpression
		//	")";
		public ParserRule getRule() { return rule; }

		//"iterate" "(" (iterators+=Iterator ("," iterators+=Iterator)*) ";" result=VariableDeclaration "|" body=OclExpression ")"
		public Group getGroup() { return cGroup; }

		//"iterate"
		public Keyword getIterateKeyword_0() { return cIterateKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//iterators+=Iterator ("," iterators+=Iterator)*
		public Group getGroup_2() { return cGroup_2; }

		//iterators+=Iterator
		public Assignment getIteratorsAssignment_2_0() { return cIteratorsAssignment_2_0; }

		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_2_0_0() { return cIteratorsIteratorParserRuleCall_2_0_0; }

		//("," iterators+=Iterator)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//iterators+=Iterator
		public Assignment getIteratorsAssignment_2_1_1() { return cIteratorsAssignment_2_1_1; }

		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_2_1_1_0() { return cIteratorsIteratorParserRuleCall_2_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }

		//result=VariableDeclaration
		public Assignment getResultAssignment_4() { return cResultAssignment_4; }

		//VariableDeclaration
		public RuleCall getResultVariableDeclarationParserRuleCall_4_0() { return cResultVariableDeclarationParserRuleCall_4_0; }

		//"|"
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }

		//body=OclExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_6_0() { return cBodyOclExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class IteratorExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IteratorExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cIteratorsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cIteratorsIteratorParserRuleCall_2_0_0_0 = (RuleCall)cIteratorsAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Assignment cIteratorsAssignment_2_0_1_1 = (Assignment)cGroup_2_0_1.eContents().get(1);
		private final RuleCall cIteratorsIteratorParserRuleCall_2_0_1_1_0 = (RuleCall)cIteratorsAssignment_2_0_1_1.eContents().get(0);
		private final Assignment cBodyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cBodyOclExpressionParserRuleCall_2_1_0 = (RuleCall)cBodyAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IteratorExp returns ocl::IteratorExp:
		//	name=STRING "(" (iterators+=Iterator ("," iterators+=Iterator)* | body=OclExpression) ")";
		public ParserRule getRule() { return rule; }

		//name=STRING "(" (iterators+=Iterator ("," iterators+=Iterator)* | body=OclExpression) ")"
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//iterators+=Iterator ("," iterators+=Iterator)* | body=OclExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//iterators+=Iterator ("," iterators+=Iterator)*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//iterators+=Iterator
		public Assignment getIteratorsAssignment_2_0_0() { return cIteratorsAssignment_2_0_0; }

		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_2_0_0_0() { return cIteratorsIteratorParserRuleCall_2_0_0_0; }

		//("," iterators+=Iterator)*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//","
		public Keyword getCommaKeyword_2_0_1_0() { return cCommaKeyword_2_0_1_0; }

		//iterators+=Iterator
		public Assignment getIteratorsAssignment_2_0_1_1() { return cIteratorsAssignment_2_0_1_1; }

		//Iterator
		public RuleCall getIteratorsIteratorParserRuleCall_2_0_1_1_0() { return cIteratorsIteratorParserRuleCall_2_0_1_1_0; }

		//body=OclExpression
		public Assignment getBodyAssignment_2_1() { return cBodyAssignment_2_1; }

		//OclExpression
		public RuleCall getBodyOclExpressionParserRuleCall_2_1_0() { return cBodyOclExpressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class LetExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LetExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIn_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIn_OclExpressionParserRuleCall_3_0 = (RuleCall)cIn_Assignment_3.eContents().get(0);
		
		//LetExp returns ocl::LetExp:
		//	"let" variable=VariableDeclaration "in" in_=OclExpression;
		public ParserRule getRule() { return rule; }

		//"let" variable=VariableDeclaration "in" in_=OclExpression
		public Group getGroup() { return cGroup; }

		//"let"
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//variable=VariableDeclaration
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariableVariableDeclarationParserRuleCall_1_0() { return cVariableVariableDeclarationParserRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//in_=OclExpression
		public Assignment getIn_Assignment_3() { return cIn_Assignment_3; }

		//OclExpression
		public RuleCall getIn_OclExpressionParserRuleCall_3_0() { return cIn_OclExpressionParserRuleCall_3_0; }
	}

	public class IfExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOclExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenExpressionOclExpressionParserRuleCall_3_0 = (RuleCall)cThenExpressionAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseExpressionOclExpressionParserRuleCall_5_0 = (RuleCall)cElseExpressionAssignment_5.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfExp returns ocl::IfExp:
		//	"If" condition=OclExpression "then" thenExpression=OclExpression "else" elseExpression=OclExpression "endif";
		public ParserRule getRule() { return rule; }

		//"If" condition=OclExpression "then" thenExpression=OclExpression "else" elseExpression=OclExpression "endif"
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=OclExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//OclExpression
		public RuleCall getConditionOclExpressionParserRuleCall_1_0() { return cConditionOclExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//thenExpression=OclExpression
		public Assignment getThenExpressionAssignment_3() { return cThenExpressionAssignment_3; }

		//OclExpression
		public RuleCall getThenExpressionOclExpressionParserRuleCall_3_0() { return cThenExpressionOclExpressionParserRuleCall_3_0; }

		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }

		//elseExpression=OclExpression
		public Assignment getElseExpressionAssignment_5() { return cElseExpressionAssignment_5; }

		//OclExpression
		public RuleCall getElseExpressionOclExpressionParserRuleCall_5_0() { return cElseExpressionOclExpressionParserRuleCall_5_0; }

		//"endif"
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}

	public class CollectionType_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionType_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementTypeOclTypeParserRuleCall_2_0 = (RuleCall)cElementTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionType_Impl returns ocl::CollectionType:
		//	"Collection" "(" elementType=OclType ")";
		public ParserRule getRule() { return rule; }

		//"Collection" "(" elementType=OclType ")"
		public Group getGroup() { return cGroup; }

		//"Collection"
		public Keyword getCollectionKeyword_0() { return cCollectionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//elementType=OclType
		public Assignment getElementTypeAssignment_2() { return cElementTypeAssignment_2; }

		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_2_0() { return cElementTypeOclTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Keyword cStringKeyword = (Keyword)rule.eContents().get(1);
		
		//StringType returns ocl::StringType:
		//	"String";
		public ParserRule getRule() { return rule; }

		//"String"
		public Keyword getStringKeyword() { return cStringKeyword; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Keyword cBooleanKeyword = (Keyword)rule.eContents().get(1);
		
		//BooleanType returns ocl::BooleanType:
		//	"Boolean";
		public ParserRule getRule() { return rule; }

		//"Boolean"
		public Keyword getBooleanKeyword() { return cBooleanKeyword; }
	}

	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerType");
		private final Keyword cIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		//IntegerType returns ocl::IntegerType:
		//	"Integer";
		public ParserRule getRule() { return rule; }

		//"Integer"
		public Keyword getIntegerKeyword() { return cIntegerKeyword; }
	}

	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealType");
		private final Keyword cRealKeyword = (Keyword)rule.eContents().get(1);
		
		//RealType returns ocl::RealType:
		//	"Real";
		public ParserRule getRule() { return rule; }

		//"Real"
		public Keyword getRealKeyword() { return cRealKeyword; }
	}

	public class BagTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BagType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBagTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameString0ParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cElementTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementTypeOclTypeParserRuleCall_6_0 = (RuleCall)cElementTypeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BagType returns ocl::BagType:
		//	"BagType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
		public ParserRule getRule() { return rule; }

		//"BagType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}"
		public Group getGroup() { return cGroup; }

		//"BagType"
		public Keyword getBagTypeKeyword_0() { return cBagTypeKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"name"
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }

		//name=String0
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_0() { return cNameString0ParserRuleCall_3_0; }

		//("type" type=OclType)?
		public Group getGroup_4() { return cGroup_4; }

		//"type"
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=OclType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_4_1_0() { return cTypeOclTypeParserRuleCall_4_1_0; }

		//"elementType"
		public Keyword getElementTypeKeyword_5() { return cElementTypeKeyword_5; }

		//elementType=OclType
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }

		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_6_0() { return cElementTypeOclTypeParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OrderedSetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrderedSetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrderedSetTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameString0ParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cElementTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementTypeOclTypeParserRuleCall_6_0 = (RuleCall)cElementTypeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OrderedSetType returns ocl::OrderedSetType:
		//	"OrderedSetType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
		public ParserRule getRule() { return rule; }

		//"OrderedSetType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}"
		public Group getGroup() { return cGroup; }

		//"OrderedSetType"
		public Keyword getOrderedSetTypeKeyword_0() { return cOrderedSetTypeKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"name"
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }

		//name=String0
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_0() { return cNameString0ParserRuleCall_3_0; }

		//("type" type=OclType)?
		public Group getGroup_4() { return cGroup_4; }

		//"type"
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=OclType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_4_1_0() { return cTypeOclTypeParserRuleCall_4_1_0; }

		//"elementType"
		public Keyword getElementTypeKeyword_5() { return cElementTypeKeyword_5; }

		//elementType=OclType
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }

		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_6_0() { return cElementTypeOclTypeParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SequenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameString0ParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cElementTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementTypeOclTypeParserRuleCall_6_0 = (RuleCall)cElementTypeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SequenceType returns ocl::SequenceType:
		//	"SequenceType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
		public ParserRule getRule() { return rule; }

		//"SequenceType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}"
		public Group getGroup() { return cGroup; }

		//"SequenceType"
		public Keyword getSequenceTypeKeyword_0() { return cSequenceTypeKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"name"
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }

		//name=String0
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_0() { return cNameString0ParserRuleCall_3_0; }

		//("type" type=OclType)?
		public Group getGroup_4() { return cGroup_4; }

		//"type"
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=OclType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_4_1_0() { return cTypeOclTypeParserRuleCall_4_1_0; }

		//"elementType"
		public Keyword getElementTypeKeyword_5() { return cElementTypeKeyword_5; }

		//elementType=OclType
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }

		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_6_0() { return cElementTypeOclTypeParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SetType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameString0ParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Keyword cElementTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementTypeOclTypeParserRuleCall_6_0 = (RuleCall)cElementTypeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SetType returns ocl::SetType:
		//	"SetType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
		public ParserRule getRule() { return rule; }

		//"SetType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}"
		public Group getGroup() { return cGroup; }

		//"SetType"
		public Keyword getSetTypeKeyword_0() { return cSetTypeKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"name"
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }

		//name=String0
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//String0
		public RuleCall getNameString0ParserRuleCall_3_0() { return cNameString0ParserRuleCall_3_0; }

		//("type" type=OclType)?
		public Group getGroup_4() { return cGroup_4; }

		//"type"
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=OclType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_4_1_0() { return cTypeOclTypeParserRuleCall_4_1_0; }

		//"elementType"
		public Keyword getElementTypeKeyword_5() { return cElementTypeKeyword_5; }

		//elementType=OclType
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }

		//OclType
		public RuleCall getElementTypeOclTypeParserRuleCall_6_0() { return cElementTypeOclTypeParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OclAnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclAnyType");
		private final Keyword cOclAnyKeyword = (Keyword)rule.eContents().get(1);
		
		//OclAnyType returns ocl::OclAnyType:
		//	"OclAny";
		public ParserRule getRule() { return rule; }

		//"OclAny"
		public Keyword getOclAnyKeyword() { return cOclAnyKeyword; }
	}

	public class TupleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTupleTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributesTupleTypeAttributeParserRuleCall_2_1_0 = (RuleCall)cAttributesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cAttributesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cAttributesTupleTypeAttributeParserRuleCall_2_2_1_0 = (RuleCall)cAttributesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TupleType returns ocl::TupleType:
		//	"TupleType" "( " ("{" attributes+=TupleTypeAttribute ("," attributes+=TupleTypeAttribute)* "}")? ")";
		public ParserRule getRule() { return rule; }

		//"TupleType" "( " ("{" attributes+=TupleTypeAttribute ("," attributes+=TupleTypeAttribute)* "}")? ")"
		public Group getGroup() { return cGroup; }

		//"TupleType"
		public Keyword getTupleTypeKeyword_0() { return cTupleTypeKeyword_0; }

		//"( "
		public Keyword getLeftParenthesisSpaceKeyword_1() { return cLeftParenthesisSpaceKeyword_1; }

		//("{" attributes+=TupleTypeAttribute ("," attributes+=TupleTypeAttribute)* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//attributes+=TupleTypeAttribute
		public Assignment getAttributesAssignment_2_1() { return cAttributesAssignment_2_1; }

		//TupleTypeAttribute
		public RuleCall getAttributesTupleTypeAttributeParserRuleCall_2_1_0() { return cAttributesTupleTypeAttributeParserRuleCall_2_1_0; }

		//("," attributes+=TupleTypeAttribute)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//attributes+=TupleTypeAttribute
		public Assignment getAttributesAssignment_2_2_1() { return cAttributesAssignment_2_2_1; }

		//TupleTypeAttribute
		public RuleCall getAttributesTupleTypeAttributeParserRuleCall_2_2_1_0() { return cAttributesTupleTypeAttributeParserRuleCall_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OclModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclModelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelOclModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelOclModelSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cModelOclModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameString0ParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OclModelElement returns ocl::OclModelElement:
		//	model=[ocl::OclModel|STRING] "!" name=String0;
		public ParserRule getRule() { return rule; }

		//model=[ocl::OclModel|STRING] "!" name=String0
		public Group getGroup() { return cGroup; }

		//model=[ocl::OclModel|STRING]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[ocl::OclModel|STRING]
		public CrossReference getModelOclModelCrossReference_0_0() { return cModelOclModelCrossReference_0_0; }

		//STRING
		public RuleCall getModelOclModelSTRINGTerminalRuleCall_0_0_1() { return cModelOclModelSTRINGTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//name=String0
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//String0
		public RuleCall getNameString0ParserRuleCall_2_0() { return cNameString0ParserRuleCall_2_0; }
	}

	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeOclTypeParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeOclTypeParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MapType returns ocl::MapType:
		//	"Map" "(" keyType=OclType "," valueType=OclType ")";
		public ParserRule getRule() { return rule; }

		//"Map" "(" keyType=OclType "," valueType=OclType ")"
		public Group getGroup() { return cGroup; }

		//"Map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//keyType=OclType
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }

		//OclType
		public RuleCall getKeyTypeOclTypeParserRuleCall_2_0() { return cKeyTypeOclTypeParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//valueType=OclType
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }

		//OclType
		public RuleCall getValueTypeOclTypeParserRuleCall_4_0() { return cValueTypeOclTypeParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class VariableDeclaration_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameIDTerminalRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cVariableExpAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final CrossReference cVariableExpVariableExpCrossReference_2_0_2_0 = (CrossReference)cVariableExpAssignment_2_0_2.eContents().get(0);
		private final RuleCall cVariableExpVariableExpSTRINGTerminalRuleCall_2_0_2_0_1 = (RuleCall)cVariableExpVariableExpCrossReference_2_0_2_0.eContents().get(1);
		private final Group cGroup_2_0_3 = (Group)cGroup_2_0.eContents().get(3);
		private final Keyword cCommaKeyword_2_0_3_0 = (Keyword)cGroup_2_0_3.eContents().get(0);
		private final Assignment cVariableExpAssignment_2_0_3_1 = (Assignment)cGroup_2_0_3.eContents().get(1);
		private final CrossReference cVariableExpVariableExpCrossReference_2_0_3_1_0 = (CrossReference)cVariableExpAssignment_2_0_3_1.eContents().get(0);
		private final RuleCall cVariableExpVariableExpSTRINGTerminalRuleCall_2_0_3_1_0_1 = (RuleCall)cVariableExpVariableExpCrossReference_2_0_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInitExpressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_2_3_0 = (RuleCall)cInitExpressionAssignment_2_3.eContents().get(0);
		
		//VariableDeclaration_Impl returns ocl::VariableDeclaration:
		//	"#" varName=ID ((":" "(" variableExp+=[ocl::VariableExp|STRING] ("," variableExp+=[ocl::VariableExp|STRING])* ")")?
		//	type=OclType? "=" initExpression=OclExpression?)?;
		public ParserRule getRule() { return rule; }

		//"#" varName=ID ((":" "(" variableExp+=[ocl::VariableExp|STRING] ("," variableExp+=[ocl::VariableExp|STRING])* ")")?
		//type=OclType? "=" initExpression=OclExpression?)?
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//varName=ID
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_1_0() { return cVarNameIDTerminalRuleCall_1_0; }

		//((":" "(" variableExp+=[ocl::VariableExp|STRING] ("," variableExp+=[ocl::VariableExp|STRING])* ")")? type=OclType? "="
		//initExpression=OclExpression?)?
		public Group getGroup_2() { return cGroup_2; }

		//(":" "(" variableExp+=[ocl::VariableExp|STRING] ("," variableExp+=[ocl::VariableExp|STRING])* ")")?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//":"
		public Keyword getColonKeyword_2_0_0() { return cColonKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }

		//variableExp+=[ocl::VariableExp|STRING]
		public Assignment getVariableExpAssignment_2_0_2() { return cVariableExpAssignment_2_0_2; }

		//[ocl::VariableExp|STRING]
		public CrossReference getVariableExpVariableExpCrossReference_2_0_2_0() { return cVariableExpVariableExpCrossReference_2_0_2_0; }

		//STRING
		public RuleCall getVariableExpVariableExpSTRINGTerminalRuleCall_2_0_2_0_1() { return cVariableExpVariableExpSTRINGTerminalRuleCall_2_0_2_0_1; }

		//("," variableExp+=[ocl::VariableExp|STRING])*
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }

		//","
		public Keyword getCommaKeyword_2_0_3_0() { return cCommaKeyword_2_0_3_0; }

		//variableExp+=[ocl::VariableExp|STRING]
		public Assignment getVariableExpAssignment_2_0_3_1() { return cVariableExpAssignment_2_0_3_1; }

		//[ocl::VariableExp|STRING]
		public CrossReference getVariableExpVariableExpCrossReference_2_0_3_1_0() { return cVariableExpVariableExpCrossReference_2_0_3_1_0; }

		//STRING
		public RuleCall getVariableExpVariableExpSTRINGTerminalRuleCall_2_0_3_1_0_1() { return cVariableExpVariableExpSTRINGTerminalRuleCall_2_0_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_4() { return cRightParenthesisKeyword_2_0_4; }

		//type=OclType?
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_1_0() { return cTypeOclTypeParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//initExpression=OclExpression?
		public Assignment getInitExpressionAssignment_2_3() { return cInitExpressionAssignment_2_3; }

		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_2_3_0() { return cInitExpressionOclExpressionParserRuleCall_2_3_0; }
	}

	public class TuplePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TuplePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeOclTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_2_1_0 = (RuleCall)cInitExpressionAssignment_2_1.eContents().get(0);
		
		//TuplePart returns ocl::TuplePart:
		//	varName=ID //('variableExp' '(' variableExp+=[ocl::VariableExp|STRING] ( "," variableExp+=[ocl::VariableExp|STRING])* ')' )?
		//	(":" type=OclType)? ("=" initExpression=OclExpression)?;
		public ParserRule getRule() { return rule; }

		//varName=ID //('variableExp' '(' variableExp+=[ocl::VariableExp|STRING] ( "," variableExp+=[ocl::VariableExp|STRING])* ')' )?
		//(":" type=OclType)? ("=" initExpression=OclExpression)?
		public Group getGroup() { return cGroup; }

		//varName=ID
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }

		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0() { return cVarNameIDTerminalRuleCall_0_0; }

		//(":" type=OclType)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=OclType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_1_1_0() { return cTypeOclTypeParserRuleCall_1_1_0; }

		//("=" initExpression=OclExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//initExpression=OclExpression
		public Assignment getInitExpressionAssignment_2_1() { return cInitExpressionAssignment_2_1; }

		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_2_1_0() { return cInitExpressionOclExpressionParserRuleCall_2_1_0; }
	}

	public class IteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Iterator");
		private final Assignment cVarNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarNameString0ParserRuleCall_0 = (RuleCall)cVarNameAssignment.eContents().get(0);
		
		////		('variableExp' '(' variableExp+=[ocl::VariableExp|STRING] ( "," variableExp+=[ocl::VariableExp|STRING])* ')' )?
		////		('type' type=OclType)?
		////		('initExpression' initExpression=OclExpression)?
		//Iterator returns ocl::Iterator:
		//	varName=String0;
		public ParserRule getRule() { return rule; }

		//varName=String0
		public Assignment getVarNameAssignment() { return cVarNameAssignment; }

		//String0
		public RuleCall getVarNameString0ParserRuleCall_0() { return cVarNameString0ParserRuleCall_0; }
	}

	public class OclParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdString0ParserRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameString0ParserRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVariableExpKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cVariableExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cVariableExpVariableExpCrossReference_3_2_0 = (CrossReference)cVariableExpAssignment_3_2.eContents().get(0);
		private final RuleCall cVariableExpVariableExpSTRINGTerminalRuleCall_3_2_0_1 = (RuleCall)cVariableExpVariableExpCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cVariableExpAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cVariableExpVariableExpCrossReference_3_3_1_0 = (CrossReference)cVariableExpAssignment_3_3_1.eContents().get(0);
		private final RuleCall cVariableExpVariableExpSTRINGTerminalRuleCall_3_3_1_0_1 = (RuleCall)cVariableExpVariableExpCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeOclTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInitExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitExpressionOclExpressionParserRuleCall_6_0 = (RuleCall)cInitExpressionAssignment_6.eContents().get(0);
		
		//OclParameter returns ocl::Parameter:
		//	("id" id=String0)? varName=String0 ":" ("variableExp" "(" variableExp+=[ocl::VariableExp|STRING] (","
		//	variableExp+=[ocl::VariableExp|STRING])* ")")? type=OclType? "=" initExpression=OclExpression?;
		public ParserRule getRule() { return rule; }

		//("id" id=String0)? varName=String0 ":" ("variableExp" "(" variableExp+=[ocl::VariableExp|STRING] (","
		//variableExp+=[ocl::VariableExp|STRING])* ")")? type=OclType? "=" initExpression=OclExpression?
		public Group getGroup() { return cGroup; }

		//("id" id=String0)?
		public Group getGroup_0() { return cGroup_0; }

		//"id"
		public Keyword getIdKeyword_0_0() { return cIdKeyword_0_0; }

		//id=String0
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }

		//String0
		public RuleCall getIdString0ParserRuleCall_0_1_0() { return cIdString0ParserRuleCall_0_1_0; }

		//varName=String0
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }

		//String0
		public RuleCall getVarNameString0ParserRuleCall_1_0() { return cVarNameString0ParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//("variableExp" "(" variableExp+=[ocl::VariableExp|STRING] ("," variableExp+=[ocl::VariableExp|STRING])* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"variableExp"
		public Keyword getVariableExpKeyword_3_0() { return cVariableExpKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//variableExp+=[ocl::VariableExp|STRING]
		public Assignment getVariableExpAssignment_3_2() { return cVariableExpAssignment_3_2; }

		//[ocl::VariableExp|STRING]
		public CrossReference getVariableExpVariableExpCrossReference_3_2_0() { return cVariableExpVariableExpCrossReference_3_2_0; }

		//STRING
		public RuleCall getVariableExpVariableExpSTRINGTerminalRuleCall_3_2_0_1() { return cVariableExpVariableExpSTRINGTerminalRuleCall_3_2_0_1; }

		//("," variableExp+=[ocl::VariableExp|STRING])*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//variableExp+=[ocl::VariableExp|STRING]
		public Assignment getVariableExpAssignment_3_3_1() { return cVariableExpAssignment_3_3_1; }

		//[ocl::VariableExp|STRING]
		public CrossReference getVariableExpVariableExpCrossReference_3_3_1_0() { return cVariableExpVariableExpCrossReference_3_3_1_0; }

		//STRING
		public RuleCall getVariableExpVariableExpSTRINGTerminalRuleCall_3_3_1_0_1() { return cVariableExpVariableExpSTRINGTerminalRuleCall_3_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//type=OclType?
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_4_0() { return cTypeOclTypeParserRuleCall_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//initExpression=OclExpression?
		public Assignment getInitExpressionAssignment_6() { return cInitExpressionAssignment_6; }

		//OclExpression
		public RuleCall getInitExpressionOclExpressionParserRuleCall_6_0() { return cInitExpressionOclExpressionParserRuleCall_6_0; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns ocl::Boolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Double");
		private final Keyword cDoubleKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Double returns ocl::Double:
		//	"Double";
		public ParserRule getRule() { return rule; }

		//"Double"
		public Keyword getDoubleKeyword() { return cDoubleKeyword; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Integer");
		private final Keyword cIntegerKeyword = (Keyword)rule.eContents().get(1);
		
		/// * TODO: implement this rule and an appropriate IValueConverter * / Integer returns ocl::Integer:
		//	"Integer";
		public ParserRule getRule() { return rule; }

		//"Integer"
		public Keyword getIntegerKeyword() { return cIntegerKeyword; }
	}

	public class MapElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyOclExpressionParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueOclExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MapElement returns ocl::MapElement:
		//	"(" key=OclExpression "," value=OclExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" key=OclExpression "," value=OclExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//key=OclExpression
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//OclExpression
		public RuleCall getKeyOclExpressionParserRuleCall_1_0() { return cKeyOclExpressionParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//value=OclExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//OclExpression
		public RuleCall getValueOclExpressionParserRuleCall_3_0() { return cValueOclExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TupleTypeAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleTypeAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameString0ParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOclTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TupleTypeAttribute returns ocl::TupleTypeAttribute:
		//	name=String0 ":" type=OclType;
		public ParserRule getRule() { return rule; }

		//name=String0 ":" type=OclType
		public Group getGroup() { return cGroup; }

		//name=String0
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_0() { return cNameString0ParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=OclType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OclType
		public RuleCall getTypeOclTypeParserRuleCall_2_0() { return cTypeOclTypeParserRuleCall_2_0; }
	}

	public class OclModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OclModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameString0ParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetamodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMetamodelOclModelCrossReference_2_0 = (CrossReference)cMetamodelAssignment_2.eContents().get(0);
		private final RuleCall cMetamodelOclModelSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cMetamodelOclModelCrossReference_2_0.eContents().get(1);
		
		////		('elements' '(' elements+=[ocl::OclModelElement|STRING] ( "," elements+=[ocl::OclModelElement|STRING])* ')' )?
		////		('model' '(' model+=[ocl::OclModel|STRING] ( "," model+=[ocl::OclModel|STRING])* ')' )?
		//OclModel returns ocl::OclModel:
		//	name=String0 ":" metamodel=[ocl::OclModel|STRING];
		public ParserRule getRule() { return rule; }

		//name=String0 ":" metamodel=[ocl::OclModel|STRING]
		public Group getGroup() { return cGroup; }

		//name=String0
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_0() { return cNameString0ParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//metamodel=[ocl::OclModel|STRING]
		public Assignment getMetamodelAssignment_2() { return cMetamodelAssignment_2; }

		//[ocl::OclModel|STRING]
		public CrossReference getMetamodelOclModelCrossReference_2_0() { return cMetamodelOclModelCrossReference_2_0; }

		//STRING
		public RuleCall getMetamodelOclModelSTRINGTerminalRuleCall_2_0_1() { return cMetamodelOclModelSTRINGTerminalRuleCall_2_0_1; }
	}

	public class PrimitiveTypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveTypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cRealKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cUnlimitedNaturalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOclAnyKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOclInvalidKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOclVoidKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveTypeIdentifier:
		//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
		public ParserRule getRule() { return rule; }

		//"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }

		//"Real"
		public Keyword getRealKeyword_2() { return cRealKeyword_2; }

		//"String"
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }

		//"UnlimitedNatural"
		public Keyword getUnlimitedNaturalKeyword_4() { return cUnlimitedNaturalKeyword_4; }

		//"OclAny"
		public Keyword getOclAnyKeyword_5() { return cOclAnyKeyword_5; }

		//"OclInvalid"
		public Keyword getOclInvalidKeyword_6() { return cOclInvalidKeyword_6; }

		//"OclVoid"
		public Keyword getOclVoidKeyword_7() { return cOclVoidKeyword_7; }
	}

	public class OCLReservedKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLReservedKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEndifKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIfKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cImpliesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLetKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cOrKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cThenKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cXorKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		
		//OCLReservedKeyword:
		//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
		public ParserRule getRule() { return rule; }

		//"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//"else"
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }

		//"endif"
		public Keyword getEndifKeyword_2() { return cEndifKeyword_2; }

		//"if"
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }

		//"implies"
		public Keyword getImpliesKeyword_4() { return cImpliesKeyword_4; }

		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }

		//"let"
		public Keyword getLetKeyword_6() { return cLetKeyword_6; }

		//"not"
		public Keyword getNotKeyword_7() { return cNotKeyword_7; }

		//"or"
		public Keyword getOrKeyword_8() { return cOrKeyword_8; }

		//"then"
		public Keyword getThenKeyword_9() { return cThenKeyword_9; }

		//"xor"
		public Keyword getXorKeyword_10() { return cXorKeyword_10; }
	}

	public class OCLUnrestrictedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLUnrestrictedIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OCLUnrestrictedIdentifier:
		//	"e" | "E";
		public ParserRule getRule() { return rule; }

		//"e" | "E"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"e"
		public Keyword getEKeyword_0() { return cEKeyword_0; }

		//"E"
		public Keyword getEKeyword_1() { return cEKeyword_1; }
	}

	public class OCLPrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLPrefixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OCLPrefixOperator:
		//	"-" | "not";
		public ParserRule getRule() { return rule; }

		//"-" | "not"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//"not"
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}

	public class OCLInfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OCLInfixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignGreaterThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cAndKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOrKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cXorKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cImpliesKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//OCLInfixOperator:
		//	"*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6() { return cGreaterThanSignEqualsSignKeyword_6; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_7() { return cLessThanSignEqualsSignKeyword_7; }

		//"="
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_9() { return cLessThanSignGreaterThanSignKeyword_9; }

		//"and"
		public Keyword getAndKeyword_10() { return cAndKeyword_10; }

		//"or"
		public Keyword getOrKeyword_11() { return cOrKeyword_11; }

		//"xor"
		public Keyword getXorKeyword_12() { return cXorKeyword_12; }

		//"implies"
		public Keyword getImpliesKeyword_13() { return cImpliesKeyword_13; }
	}

	public class SelfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "selfExpression");
		private final Keyword cSelfKeyword = (Keyword)rule.eContents().get(1);
		
		//selfExpression:
		//	"self";
		public ParserRule getRule() { return rule; }

		//"self"
		public Keyword getSelfKeyword() { return cSelfKeyword; }
	}
	
	
	private MyModelElements pMyModel;
	private MigrationLibraryElements pMigrationLibrary;
	private MigrationProgramElements pMigrationProgram;
	private ArtifactElements pArtifact;
	private RuleElements pRule;
	private OpDefElements pOpDef;
	private EPackageOpDefElements pEPackageOpDef;
	private EClassOpDefElements pEClassOpDef;
	private EAttributeOpDefElements pEAttributeOpDef;
	private EReferenceOpDefElements pEReferenceOpDef;
	private SetterDefElements pSetterDef;
	private RewritingRuleElements pRewritingRule;
	private MigratorElements pMigrator;
	private MigratorSXElements pMigratorSX;
	private MigratorDXElements pMigratorDX;
	private FilterMigratorElements pFilterMigrator;
	private DotNavigationObjSXElements pDotNavigationObjSX;
	private DotNavigationObjDXElements pDotNavigationObjDX;
	private ParameterElements pParameter;
	private PackageElements pPackage;
	private ClassElements pClass;
	private AttributeElements pAttribute;
	private ReferenceElements pReference;
	private StructuralFeatureElements pStructuralFeature;
	private OclFeatureElements pOclFeature;
	private OclTypeElements pOclType;
	private OclExpressionElements pOclExpression;
	private VariableDeclarationElements pVariableDeclaration;
	private OclFeatureDefinitionElements pOclFeatureDefinition;
	private String0Elements pString0;
	private OclContextDefinitionElements pOclContextDefinition;
	private OclAttributeElements pOclAttribute;
	private OperationElements pOperation;
	private OclType_ImplElements pOclType_Impl;
	private VariableExpElements pVariableExp;
	private SuperExpElements pSuperExp;
	private StringExpElements pStringExp;
	private BooleanExpElements pBooleanExp;
	private RealExpElements pRealExp;
	private IntegerExpElements pIntegerExp;
	private BagExpElements pBagExp;
	private OrderedSetExpElements pOrderedSetExp;
	private SequenceExpElements pSequenceExp;
	private SetExpElements pSetExp;
	private TupleExpElements pTupleExp;
	private MapExpElements pMapExp;
	private EnumLiteralExpElements pEnumLiteralExp;
	private OclUndefinedExpElements pOclUndefinedExp;
	private NavigationOrAttributeCallExpElements pNavigationOrAttributeCallExp;
	private OperationCallExpElements pOperationCallExp;
	private OperatorCallExpElements pOperatorCallExp;
	private CollectionOperationCallExpElements pCollectionOperationCallExp;
	private IterateExpElements pIterateExp;
	private IteratorExpElements pIteratorExp;
	private LetExpElements pLetExp;
	private IfExpElements pIfExp;
	private CollectionType_ImplElements pCollectionType_Impl;
	private StringTypeElements pStringType;
	private BooleanTypeElements pBooleanType;
	private IntegerTypeElements pIntegerType;
	private RealTypeElements pRealType;
	private BagTypeElements pBagType;
	private OrderedSetTypeElements pOrderedSetType;
	private SequenceTypeElements pSequenceType;
	private SetTypeElements pSetType;
	private OclAnyTypeElements pOclAnyType;
	private TupleTypeElements pTupleType;
	private OclModelElementElements pOclModelElement;
	private MapTypeElements pMapType;
	private VariableDeclaration_ImplElements pVariableDeclaration_Impl;
	private TuplePartElements pTuplePart;
	private IteratorElements pIterator;
	private OclParameterElements pOclParameter;
	private BooleanElements pBoolean;
	private DoubleElements pDouble;
	private IntegerElements pInteger;
	private MapElementElements pMapElement;
	private TupleTypeAttributeElements pTupleTypeAttribute;
	private OclModelElements pOclModel;
	private PrimitiveTypeIdentifierElements pPrimitiveTypeIdentifier;
	private OCLReservedKeywordElements pOCLReservedKeyword;
	private OCLUnrestrictedIdentifierElements pOCLUnrestrictedIdentifier;
	private OCLPrefixOperatorElements pOCLPrefixOperator;
	private OCLInfixOperatorElements pOCLInfixOperator;
	private SelfExpressionElements pSelfExpression;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EmigGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MyModel:
	//	migrationLib=MigrationLibrary | MigrationProgr=MigrationProgram;
	public MyModelElements getMyModelAccess() {
		return (pMyModel != null) ? pMyModel : (pMyModel = new MyModelElements());
	}
	
	public ParserRule getMyModelRule() {
		return getMyModelAccess().getRule();
	}

	//MigrationLibrary:
	//	"Library" title=ID "{" rules+=Rule* "}";
	public MigrationLibraryElements getMigrationLibraryAccess() {
		return (pMigrationLibrary != null) ? pMigrationLibrary : (pMigrationLibrary = new MigrationLibraryElements());
	}
	
	public ParserRule getMigrationLibraryRule() {
		return getMigrationLibraryAccess().getRule();
	}

	//MigrationProgram:
	//	("include" libs+=STRING ";")* migr="migrate" typeArt=Artifact name=STRING ":"
	//	(transformationPackage+=[ecore::EPackage] ("," transformationPackage+=[ecore::EPackage])) "with" delta=STRING "{"
	//	rules+=Rule* "}";
	public MigrationProgramElements getMigrationProgramAccess() {
		return (pMigrationProgram != null) ? pMigrationProgram : (pMigrationProgram = new MigrationProgramElements());
	}
	
	public ParserRule getMigrationProgramRule() {
		return getMigrationProgramAccess().getRule();
	}

	//Artifact:
	//	type=("transformation" | "model" | "tcs-model");
	public ArtifactElements getArtifactAccess() {
		return (pArtifact != null) ? pArtifact : (pArtifact = new ArtifactElements());
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}

	//Rule:
	//	"rule" name=ID "[" //|refFilter=[edelta::ComplexOperatorDef]
	//	filter=OpDef "]" "{" rewritingRules+=RewritingRule* "}";
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	////ComplexOpDef:op=[];
	//OpDef:
	//	EPackageOpDef | EClassOpDef | EAttributeOpDef | EReferenceOpDef;
	public OpDefElements getOpDefAccess() {
		return (pOpDef != null) ? pOpDef : (pOpDef = new OpDefElements());
	}
	
	public ParserRule getOpDefRule() {
		return getOpDefAccess().getRule();
	}

	//EPackageOpDef:
	//	("package" var=Package "=") ((op="changePackage" | op="addPackage" | op="deletePackage") "(" ref=Package ":" "package"
	//	")" "where" "{" (setters+=setterDef | classes+=EClassOpDef)* "}") //|complex+=CallOperator
	//;
	public EPackageOpDefElements getEPackageOpDefAccess() {
		return (pEPackageOpDef != null) ? pEPackageOpDef : (pEPackageOpDef = new EPackageOpDefElements());
	}
	
	public ParserRule getEPackageOpDefRule() {
		return getEPackageOpDefAccess().getRule();
	}

	//EClassOpDef:
	//	("class" var=Class "=") ((op="changeClass" | op="addClass" | op="deleteClass") "(" ref=Class ":" "class" ")" "where"
	//	("{" (setters+=setterDef | attributes+=EAttributeOpDef | references+=EReferenceOpDef)* "}")) //|complex+=CallOperator
	//;
	public EClassOpDefElements getEClassOpDefAccess() {
		return (pEClassOpDef != null) ? pEClassOpDef : (pEClassOpDef = new EClassOpDefElements());
	}
	
	public ParserRule getEClassOpDefRule() {
		return getEClassOpDefAccess().getRule();
	}

	//EAttributeOpDef:
	//	("attribute" var=Attribute "=") (((op="changeEAttribute" | op="addEAttribute" | op="deleteEAttribute") "("
	//	ref=Attribute ":" "attribute") ")" "where" ("{" setters+=setterDef* "}" | ";")) //|complex+=CallOperator
	//;
	public EAttributeOpDefElements getEAttributeOpDefAccess() {
		return (pEAttributeOpDef != null) ? pEAttributeOpDef : (pEAttributeOpDef = new EAttributeOpDefElements());
	}
	
	public ParserRule getEAttributeOpDefRule() {
		return getEAttributeOpDefAccess().getRule();
	}

	//EReferenceOpDef:
	//	("reference" var=Reference "=") (((op="changeEReference" | op="addEReference" | op="deleteEReference") "("
	//	ref=Reference ":" "reference") ")" "where" ("{" setters+=setterDef* "}") //|complex+=CallOperator
	//);
	public EReferenceOpDefElements getEReferenceOpDefAccess() {
		return (pEReferenceOpDef != null) ? pEReferenceOpDef : (pEReferenceOpDef = new EReferenceOpDefElements());
	}
	
	public ParserRule getEReferenceOpDefRule() {
		return getEReferenceOpDefAccess().getRule();
	}

	//setterDef:
	//	"set" metafeature=[ecore::EStructuralFeature] operator="=" //infixOperator 
	//	par+=Parameter ("," par+=Parameter)* ";";
	public SetterDefElements getSetterDefAccess() {
		return (pSetterDef != null) ? pSetterDef : (pSetterDef = new SetterDefElements());
	}
	
	public ParserRule getSetterDefRule() {
		return getSetterDefAccess().getRule();
	}

	//RewritingRule:
	//	(migratorsSX+=MigratorSX "->" migratorDX+=MigratorDX) ("&" migratorSX+=MigratorSX "->" migratorDX+=MigratorDX)*;
	public RewritingRuleElements getRewritingRuleAccess() {
		return (pRewritingRule != null) ? pRewritingRule : (pRewritingRule = new RewritingRuleElements());
	}
	
	public ParserRule getRewritingRuleRule() {
		return getRewritingRuleAccess().getRule();
	}

	//Migrator:
	//	MigratorSX | MigratorDX;
	public MigratorElements getMigratorAccess() {
		return (pMigrator != null) ? pMigrator : (pMigrator = new MigratorElements());
	}
	
	public ParserRule getMigratorRule() {
		return getMigratorAccess().getRule();
	}

	//MigratorSX:
	//	{MigratorSX} name=VariableDeclaration ":" elementSX=[ecore::EClass] "where" "[" filterSX+=FilterMigrator ("&"
	//	filterSX+=FilterMigrator)* "]";
	public MigratorSXElements getMigratorSXAccess() {
		return (pMigratorSX != null) ? pMigratorSX : (pMigratorSX = new MigratorSXElements());
	}
	
	public ParserRule getMigratorSXRule() {
		return getMigratorSXAccess().getRule();
	}

	//MigratorDX:
	//	{MigratorDX} (name=ID ":" elementDX=[ecore::EClass] "[" filterDX+=FilterMigrator ("&" filterDX+=FilterMigrator)* "]")
	//	| "null";
	public MigratorDXElements getMigratorDXAccess() {
		return (pMigratorDX != null) ? pMigratorDX : (pMigratorDX = new MigratorDXElements());
	}
	
	public ParserRule getMigratorDXRule() {
		return getMigratorDXAccess().getRule();
	}

	////(featureSX=DotNavigationObjSX) op="="
	//////EssentialOCLInfixOperator   
	////(value=DotNavigationObjDX)?
	//FilterMigrator:
	//	specification=OclExpression?;
	public FilterMigratorElements getFilterMigratorAccess() {
		return (pFilterMigrator != null) ? pFilterMigrator : (pFilterMigrator = new FilterMigratorElements());
	}
	
	public ParserRule getFilterMigratorRule() {
		return getFilterMigratorAccess().getRule();
	}

	//DotNavigationObjSX:
	//	"#" obj=[ecore::EObject] ("." ref=[ecore::EStructuralFeature])*;
	public DotNavigationObjSXElements getDotNavigationObjSXAccess() {
		return (pDotNavigationObjSX != null) ? pDotNavigationObjSX : (pDotNavigationObjSX = new DotNavigationObjSXElements());
	}
	
	public ParserRule getDotNavigationObjSXRule() {
		return getDotNavigationObjSXAccess().getRule();
	}

	//DotNavigationObjDX:
	//	"#" obj=[ecore::EObject] ("." ref=[ecore::EStructuralFeature])*;
	public DotNavigationObjDXElements getDotNavigationObjDXAccess() {
		return (pDotNavigationObjDX != null) ? pDotNavigationObjDX : (pDotNavigationObjDX = new DotNavigationObjDXElements());
	}
	
	public ParserRule getDotNavigationObjDXRule() {
		return getDotNavigationObjDXAccess().getRule();
	}

	//Parameter:
	//	"%" name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Package returns ecore::EPackage:
	//	{Package} name=ID;
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Class returns ecore::EClass:
	//	{Class} name=ID;
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Attribute returns ecore::EAttribute:
	//	{Attribute} name=ID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Reference returns ecore::EReference:
	//	{Reference} name=ID;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//StructuralFeature returns ecore::EStructuralFeature:
	//	Attribute | Reference;
	public StructuralFeatureElements getStructuralFeatureAccess() {
		return (pStructuralFeature != null) ? pStructuralFeature : (pStructuralFeature = new StructuralFeatureElements());
	}
	
	public ParserRule getStructuralFeatureRule() {
		return getStructuralFeatureAccess().getRule();
	}

	////Ocl grammar specification
	//OclFeature returns ocl::OclFeature:
	//	OclAttribute | Operation;
	public OclFeatureElements getOclFeatureAccess() {
		return (pOclFeature != null) ? pOclFeature : (pOclFeature = new OclFeatureElements());
	}
	
	public ParserRule getOclFeatureRule() {
		return getOclFeatureAccess().getRule();
	}

	//OclType returns ocl::OclType:
	//	OclType_Impl | CollectionType_Impl | StringType | BooleanType | IntegerType | RealType | BagType | OrderedSetType |
	//	SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType;
	public OclTypeElements getOclTypeAccess() {
		return (pOclType != null) ? pOclType : (pOclType = new OclTypeElements());
	}
	
	public ParserRule getOclTypeRule() {
		return getOclTypeAccess().getRule();
	}

	//OclExpression returns ocl::OclExpression:
	//	VariableExp | SuperExp | StringExp | BooleanExp | RealExp | IntegerExp | BagExp | OrderedSetExp | SequenceExp | SetExp
	//	| TupleExp | MapExp | EnumLiteralExp | OclUndefinedExp | OperatorCallExp | CollectionOperationCallExp | IterateExp |
	//	IteratorExp | LetExp | IfExp | CollectionType_Impl | OclType_Impl | StringType | BooleanType | IntegerType | RealType
	//	| BagType | OrderedSetType | SequenceType | SetType | OclAnyType | TupleType | OclModelElement | MapType |
	//	NavigationOrAttributeCallExp {NavigationOrAttributeCallExp.src=current};
	public OclExpressionElements getOclExpressionAccess() {
		return (pOclExpression != null) ? pOclExpression : (pOclExpression = new OclExpressionElements());
	}
	
	public ParserRule getOclExpressionRule() {
		return getOclExpressionAccess().getRule();
	}

	//VariableDeclaration returns ocl::VariableDeclaration:
	//	VariableDeclaration_Impl | TuplePart | Iterator | OclParameter;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//OclFeatureDefinition returns ocl::OclFeatureDefinition:
	//	("context_" context_=OclContextDefinition)? "def" ":" feature=OclFeature;
	public OclFeatureDefinitionElements getOclFeatureDefinitionAccess() {
		return (pOclFeatureDefinition != null) ? pOclFeatureDefinition : (pOclFeatureDefinition = new OclFeatureDefinitionElements());
	}
	
	public ParserRule getOclFeatureDefinitionRule() {
		return getOclFeatureDefinitionAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / String0 returns ocl::String:
	//	"String";
	public String0Elements getString0Access() {
		return (pString0 != null) ? pString0 : (pString0 = new String0Elements());
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//OclContextDefinition returns ocl::OclContextDefinition:
	//	"context" context_=OclType;
	public OclContextDefinitionElements getOclContextDefinitionAccess() {
		return (pOclContextDefinition != null) ? pOclContextDefinition : (pOclContextDefinition = new OclContextDefinitionElements());
	}
	
	public ParserRule getOclContextDefinitionRule() {
		return getOclContextDefinitionAccess().getRule();
	}

	//OclAttribute returns ocl::Attribute:
	//	name=STRING ":" type=OclType "=" initExpression=OclExpression;
	public OclAttributeElements getOclAttributeAccess() {
		return (pOclAttribute != null) ? pOclAttribute : (pOclAttribute = new OclAttributeElements());
	}
	
	public ParserRule getOclAttributeRule() {
		return getOclAttributeAccess().getRule();
	}

	//Operation returns ocl::Operation:
	//	name=STRING "(" ("{" parameters+=OclParameter ("," parameters+=OclParameter)* "}")? ")" ":" returnType=OclType
	//	body=OclExpression;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//OclType_Impl returns ocl::OclType:
	//	"OclType" name=STRING ("type" type=OclType)?;
	public OclType_ImplElements getOclType_ImplAccess() {
		return (pOclType_Impl != null) ? pOclType_Impl : (pOclType_Impl = new OclType_ImplElements());
	}
	
	public ParserRule getOclType_ImplRule() {
		return getOclType_ImplAccess().getRule();
	}

	//VariableExp returns ocl::VariableExp:
	//	{VariableExp} referredVariable= //STRING
	//	[ocl::VariableDeclaration];
	public VariableExpElements getVariableExpAccess() {
		return (pVariableExp != null) ? pVariableExp : (pVariableExp = new VariableExpElements());
	}
	
	public ParserRule getVariableExpRule() {
		return getVariableExpAccess().getRule();
	}

	//SuperExp returns ocl::SuperExp:
	//	{SuperExp} "super";
	public SuperExpElements getSuperExpAccess() {
		return (pSuperExp != null) ? pSuperExp : (pSuperExp = new SuperExpElements());
	}
	
	public ParserRule getSuperExpRule() {
		return getSuperExpAccess().getRule();
	}

	//StringExp returns ocl::StringExp:
	//	stringSymbol=String0;
	public StringExpElements getStringExpAccess() {
		return (pStringExp != null) ? pStringExp : (pStringExp = new StringExpElements());
	}
	
	public ParserRule getStringExpRule() {
		return getStringExpAccess().getRule();
	}

	//BooleanExp returns ocl::BooleanExp:
	//	booleanSymbol=Boolean;
	public BooleanExpElements getBooleanExpAccess() {
		return (pBooleanExp != null) ? pBooleanExp : (pBooleanExp = new BooleanExpElements());
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}

	//RealExp returns ocl::RealExp:
	//	realSymbol=Double;
	public RealExpElements getRealExpAccess() {
		return (pRealExp != null) ? pRealExp : (pRealExp = new RealExpElements());
	}
	
	public ParserRule getRealExpRule() {
		return getRealExpAccess().getRule();
	}

	//IntegerExp returns ocl::IntegerExp:
	//	integerSymbol=Integer;
	public IntegerExpElements getIntegerExpAccess() {
		return (pIntegerExp != null) ? pIntegerExp : (pIntegerExp = new IntegerExpElements());
	}
	
	public ParserRule getIntegerExpRule() {
		return getIntegerExpAccess().getRule();
	}

	//BagExp returns ocl::BagExp:
	//	{BagExp} "Bag" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
	public BagExpElements getBagExpAccess() {
		return (pBagExp != null) ? pBagExp : (pBagExp = new BagExpElements());
	}
	
	public ParserRule getBagExpRule() {
		return getBagExpAccess().getRule();
	}

	//OrderedSetExp returns ocl::OrderedSetExp:
	//	{OrderedSetExp} "OrderedSet" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
	public OrderedSetExpElements getOrderedSetExpAccess() {
		return (pOrderedSetExp != null) ? pOrderedSetExp : (pOrderedSetExp = new OrderedSetExpElements());
	}
	
	public ParserRule getOrderedSetExpRule() {
		return getOrderedSetExpAccess().getRule();
	}

	//SequenceExp returns ocl::SequenceExp:
	//	{SequenceExp} "Sequence" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
	public SequenceExpElements getSequenceExpAccess() {
		return (pSequenceExp != null) ? pSequenceExp : (pSequenceExp = new SequenceExpElements());
	}
	
	public ParserRule getSequenceExpRule() {
		return getSequenceExpAccess().getRule();
	}

	//SetExp returns ocl::SetExp:
	//	{SetExp} "Set" "{" ("{" elements+=OclExpression ("," elements+=OclExpression)* "}")? "}";
	public SetExpElements getSetExpAccess() {
		return (pSetExp != null) ? pSetExp : (pSetExp = new SetExpElements());
	}
	
	public ParserRule getSetExpRule() {
		return getSetExpAccess().getRule();
	}

	//TupleExp returns ocl::TupleExp:
	//	{TupleExp} "Tuple" "{" ("{" tuplePart+=TuplePart ("," tuplePart+=TuplePart)* "}")? "}";
	public TupleExpElements getTupleExpAccess() {
		return (pTupleExp != null) ? pTupleExp : (pTupleExp = new TupleExpElements());
	}
	
	public ParserRule getTupleExpRule() {
		return getTupleExpAccess().getRule();
	}

	//MapExp returns ocl::MapExp:
	//	{MapExp} "Map" "{" ("{" elements+=MapElement ("," elements+=MapElement)* "}")? "}";
	public MapExpElements getMapExpAccess() {
		return (pMapExp != null) ? pMapExp : (pMapExp = new MapExpElements());
	}
	
	public ParserRule getMapExpRule() {
		return getMapExpAccess().getRule();
	}

	////('type' type=OclType)?
	//EnumLiteralExp returns ocl::EnumLiteralExp:
	//	"#" name=STRING;
	public EnumLiteralExpElements getEnumLiteralExpAccess() {
		return (pEnumLiteralExp != null) ? pEnumLiteralExp : (pEnumLiteralExp = new EnumLiteralExpElements());
	}
	
	public ParserRule getEnumLiteralExpRule() {
		return getEnumLiteralExpAccess().getRule();
	}

	//OclUndefinedExp returns ocl::OclUndefinedExp:
	//	{OclUndefinedExp} "OclUndefined";
	public OclUndefinedExpElements getOclUndefinedExpAccess() {
		return (pOclUndefinedExp != null) ? pOclUndefinedExp : (pOclUndefinedExp = new OclUndefinedExpElements());
	}
	
	public ParserRule getOclUndefinedExpRule() {
		return getOclUndefinedExpAccess().getRule();
	}

	//NavigationOrAttributeCallExp returns ocl::OclExpression:
	//	{ocl::NavigationOrAttributeCallExp} "." name=ID;
	public NavigationOrAttributeCallExpElements getNavigationOrAttributeCallExpAccess() {
		return (pNavigationOrAttributeCallExp != null) ? pNavigationOrAttributeCallExp : (pNavigationOrAttributeCallExp = new NavigationOrAttributeCallExpElements());
	}
	
	public ParserRule getNavigationOrAttributeCallExpRule() {
		return getNavigationOrAttributeCallExpAccess().getRule();
	}

	////'source' source=OclExpression
	//OperationCallExp returns ocl::OperationCallExp:
	//	operationName=ID "(" arguments+=OclExpression ("," arguments+=OclExpression)* ")";
	public OperationCallExpElements getOperationCallExpAccess() {
		return (pOperationCallExp != null) ? pOperationCallExp : (pOperationCallExp = new OperationCallExpElements());
	}
	
	public ParserRule getOperationCallExpRule() {
		return getOperationCallExpAccess().getRule();
	}

	////	'source' source=OclExpression
	//OperatorCallExp returns ocl::OperatorCallExp:
	//	operationName=String0 "(" ("arguments" "{" arguments+=OclExpression ("," arguments+=OclExpression)* "}")? ")";
	public OperatorCallExpElements getOperatorCallExpAccess() {
		return (pOperatorCallExp != null) ? pOperatorCallExp : (pOperatorCallExp = new OperatorCallExpElements());
	}
	
	public ParserRule getOperatorCallExpRule() {
		return getOperatorCallExpAccess().getRule();
	}

	////'source' source=OclExpression
	//CollectionOperationCallExp returns ocl::CollectionOperationCallExp:
	//	operationName=ID "(" arguments+=OclExpression ("," arguments+=OclExpression)* ")";
	public CollectionOperationCallExpElements getCollectionOperationCallExpAccess() {
		return (pCollectionOperationCallExp != null) ? pCollectionOperationCallExp : (pCollectionOperationCallExp = new CollectionOperationCallExpElements());
	}
	
	public ParserRule getCollectionOperationCallExpRule() {
		return getCollectionOperationCallExpAccess().getRule();
	}

	////'source' source=OclExpression
	//IterateExp returns ocl::IterateExp:
	//	"iterate" "(" (iterators+=Iterator ("," iterators+=Iterator)*) ";" result=VariableDeclaration "|" body=OclExpression
	//	")";
	public IterateExpElements getIterateExpAccess() {
		return (pIterateExp != null) ? pIterateExp : (pIterateExp = new IterateExpElements());
	}
	
	public ParserRule getIterateExpRule() {
		return getIterateExpAccess().getRule();
	}

	//IteratorExp returns ocl::IteratorExp:
	//	name=STRING "(" (iterators+=Iterator ("," iterators+=Iterator)* | body=OclExpression) ")";
	public IteratorExpElements getIteratorExpAccess() {
		return (pIteratorExp != null) ? pIteratorExp : (pIteratorExp = new IteratorExpElements());
	}
	
	public ParserRule getIteratorExpRule() {
		return getIteratorExpAccess().getRule();
	}

	//LetExp returns ocl::LetExp:
	//	"let" variable=VariableDeclaration "in" in_=OclExpression;
	public LetExpElements getLetExpAccess() {
		return (pLetExp != null) ? pLetExp : (pLetExp = new LetExpElements());
	}
	
	public ParserRule getLetExpRule() {
		return getLetExpAccess().getRule();
	}

	//IfExp returns ocl::IfExp:
	//	"If" condition=OclExpression "then" thenExpression=OclExpression "else" elseExpression=OclExpression "endif";
	public IfExpElements getIfExpAccess() {
		return (pIfExp != null) ? pIfExp : (pIfExp = new IfExpElements());
	}
	
	public ParserRule getIfExpRule() {
		return getIfExpAccess().getRule();
	}

	//CollectionType_Impl returns ocl::CollectionType:
	//	"Collection" "(" elementType=OclType ")";
	public CollectionType_ImplElements getCollectionType_ImplAccess() {
		return (pCollectionType_Impl != null) ? pCollectionType_Impl : (pCollectionType_Impl = new CollectionType_ImplElements());
	}
	
	public ParserRule getCollectionType_ImplRule() {
		return getCollectionType_ImplAccess().getRule();
	}

	//StringType returns ocl::StringType:
	//	"String";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//BooleanType returns ocl::BooleanType:
	//	"Boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//IntegerType returns ocl::IntegerType:
	//	"Integer";
	public IntegerTypeElements getIntegerTypeAccess() {
		return (pIntegerType != null) ? pIntegerType : (pIntegerType = new IntegerTypeElements());
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//RealType returns ocl::RealType:
	//	"Real";
	public RealTypeElements getRealTypeAccess() {
		return (pRealType != null) ? pRealType : (pRealType = new RealTypeElements());
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//BagType returns ocl::BagType:
	//	"BagType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
	public BagTypeElements getBagTypeAccess() {
		return (pBagType != null) ? pBagType : (pBagType = new BagTypeElements());
	}
	
	public ParserRule getBagTypeRule() {
		return getBagTypeAccess().getRule();
	}

	//OrderedSetType returns ocl::OrderedSetType:
	//	"OrderedSetType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
	public OrderedSetTypeElements getOrderedSetTypeAccess() {
		return (pOrderedSetType != null) ? pOrderedSetType : (pOrderedSetType = new OrderedSetTypeElements());
	}
	
	public ParserRule getOrderedSetTypeRule() {
		return getOrderedSetTypeAccess().getRule();
	}

	//SequenceType returns ocl::SequenceType:
	//	"SequenceType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
	public SequenceTypeElements getSequenceTypeAccess() {
		return (pSequenceType != null) ? pSequenceType : (pSequenceType = new SequenceTypeElements());
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//SetType returns ocl::SetType:
	//	"SetType" "{" "name" name=String0 ("type" type=OclType)? "elementType" elementType=OclType "}";
	public SetTypeElements getSetTypeAccess() {
		return (pSetType != null) ? pSetType : (pSetType = new SetTypeElements());
	}
	
	public ParserRule getSetTypeRule() {
		return getSetTypeAccess().getRule();
	}

	//OclAnyType returns ocl::OclAnyType:
	//	"OclAny";
	public OclAnyTypeElements getOclAnyTypeAccess() {
		return (pOclAnyType != null) ? pOclAnyType : (pOclAnyType = new OclAnyTypeElements());
	}
	
	public ParserRule getOclAnyTypeRule() {
		return getOclAnyTypeAccess().getRule();
	}

	//TupleType returns ocl::TupleType:
	//	"TupleType" "( " ("{" attributes+=TupleTypeAttribute ("," attributes+=TupleTypeAttribute)* "}")? ")";
	public TupleTypeElements getTupleTypeAccess() {
		return (pTupleType != null) ? pTupleType : (pTupleType = new TupleTypeElements());
	}
	
	public ParserRule getTupleTypeRule() {
		return getTupleTypeAccess().getRule();
	}

	//OclModelElement returns ocl::OclModelElement:
	//	model=[ocl::OclModel|STRING] "!" name=String0;
	public OclModelElementElements getOclModelElementAccess() {
		return (pOclModelElement != null) ? pOclModelElement : (pOclModelElement = new OclModelElementElements());
	}
	
	public ParserRule getOclModelElementRule() {
		return getOclModelElementAccess().getRule();
	}

	//MapType returns ocl::MapType:
	//	"Map" "(" keyType=OclType "," valueType=OclType ")";
	public MapTypeElements getMapTypeAccess() {
		return (pMapType != null) ? pMapType : (pMapType = new MapTypeElements());
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}

	//VariableDeclaration_Impl returns ocl::VariableDeclaration:
	//	"#" varName=ID ((":" "(" variableExp+=[ocl::VariableExp|STRING] ("," variableExp+=[ocl::VariableExp|STRING])* ")")?
	//	type=OclType? "=" initExpression=OclExpression?)?;
	public VariableDeclaration_ImplElements getVariableDeclaration_ImplAccess() {
		return (pVariableDeclaration_Impl != null) ? pVariableDeclaration_Impl : (pVariableDeclaration_Impl = new VariableDeclaration_ImplElements());
	}
	
	public ParserRule getVariableDeclaration_ImplRule() {
		return getVariableDeclaration_ImplAccess().getRule();
	}

	//TuplePart returns ocl::TuplePart:
	//	varName=ID //('variableExp' '(' variableExp+=[ocl::VariableExp|STRING] ( "," variableExp+=[ocl::VariableExp|STRING])* ')' )?
	//	(":" type=OclType)? ("=" initExpression=OclExpression)?;
	public TuplePartElements getTuplePartAccess() {
		return (pTuplePart != null) ? pTuplePart : (pTuplePart = new TuplePartElements());
	}
	
	public ParserRule getTuplePartRule() {
		return getTuplePartAccess().getRule();
	}

	////		('variableExp' '(' variableExp+=[ocl::VariableExp|STRING] ( "," variableExp+=[ocl::VariableExp|STRING])* ')' )?
	////		('type' type=OclType)?
	////		('initExpression' initExpression=OclExpression)?
	//Iterator returns ocl::Iterator:
	//	varName=String0;
	public IteratorElements getIteratorAccess() {
		return (pIterator != null) ? pIterator : (pIterator = new IteratorElements());
	}
	
	public ParserRule getIteratorRule() {
		return getIteratorAccess().getRule();
	}

	//OclParameter returns ocl::Parameter:
	//	("id" id=String0)? varName=String0 ":" ("variableExp" "(" variableExp+=[ocl::VariableExp|STRING] (","
	//	variableExp+=[ocl::VariableExp|STRING])* ")")? type=OclType? "=" initExpression=OclExpression?;
	public OclParameterElements getOclParameterAccess() {
		return (pOclParameter != null) ? pOclParameter : (pOclParameter = new OclParameterElements());
	}
	
	public ParserRule getOclParameterRule() {
		return getOclParameterAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Boolean returns ocl::Boolean:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Double returns ocl::Double:
	//	"Double";
	public DoubleElements getDoubleAccess() {
		return (pDouble != null) ? pDouble : (pDouble = new DoubleElements());
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}

	/// * TODO: implement this rule and an appropriate IValueConverter * / Integer returns ocl::Integer:
	//	"Integer";
	public IntegerElements getIntegerAccess() {
		return (pInteger != null) ? pInteger : (pInteger = new IntegerElements());
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//MapElement returns ocl::MapElement:
	//	"(" key=OclExpression "," value=OclExpression ")";
	public MapElementElements getMapElementAccess() {
		return (pMapElement != null) ? pMapElement : (pMapElement = new MapElementElements());
	}
	
	public ParserRule getMapElementRule() {
		return getMapElementAccess().getRule();
	}

	//TupleTypeAttribute returns ocl::TupleTypeAttribute:
	//	name=String0 ":" type=OclType;
	public TupleTypeAttributeElements getTupleTypeAttributeAccess() {
		return (pTupleTypeAttribute != null) ? pTupleTypeAttribute : (pTupleTypeAttribute = new TupleTypeAttributeElements());
	}
	
	public ParserRule getTupleTypeAttributeRule() {
		return getTupleTypeAttributeAccess().getRule();
	}

	////		('elements' '(' elements+=[ocl::OclModelElement|STRING] ( "," elements+=[ocl::OclModelElement|STRING])* ')' )?
	////		('model' '(' model+=[ocl::OclModel|STRING] ( "," model+=[ocl::OclModel|STRING])* ')' )?
	//OclModel returns ocl::OclModel:
	//	name=String0 ":" metamodel=[ocl::OclModel|STRING];
	public OclModelElements getOclModelAccess() {
		return (pOclModel != null) ? pOclModel : (pOclModel = new OclModelElements());
	}
	
	public ParserRule getOclModelRule() {
		return getOclModelAccess().getRule();
	}

	//PrimitiveTypeIdentifier:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclVoid";
	public PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return (pPrimitiveTypeIdentifier != null) ? pPrimitiveTypeIdentifier : (pPrimitiveTypeIdentifier = new PrimitiveTypeIdentifierElements());
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//OCLReservedKeyword:
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public OCLReservedKeywordElements getOCLReservedKeywordAccess() {
		return (pOCLReservedKeyword != null) ? pOCLReservedKeyword : (pOCLReservedKeyword = new OCLReservedKeywordElements());
	}
	
	public ParserRule getOCLReservedKeywordRule() {
		return getOCLReservedKeywordAccess().getRule();
	}

	//OCLUnrestrictedIdentifier:
	//	"e" | "E";
	public OCLUnrestrictedIdentifierElements getOCLUnrestrictedIdentifierAccess() {
		return (pOCLUnrestrictedIdentifier != null) ? pOCLUnrestrictedIdentifier : (pOCLUnrestrictedIdentifier = new OCLUnrestrictedIdentifierElements());
	}
	
	public ParserRule getOCLUnrestrictedIdentifierRule() {
		return getOCLUnrestrictedIdentifierAccess().getRule();
	}

	//OCLPrefixOperator:
	//	"-" | "not";
	public OCLPrefixOperatorElements getOCLPrefixOperatorAccess() {
		return (pOCLPrefixOperator != null) ? pOCLPrefixOperator : (pOCLPrefixOperator = new OCLPrefixOperatorElements());
	}
	
	public ParserRule getOCLPrefixOperatorRule() {
		return getOCLPrefixOperatorAccess().getRule();
	}

	//OCLInfixOperator:
	//	"*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies";
	public OCLInfixOperatorElements getOCLInfixOperatorAccess() {
		return (pOCLInfixOperator != null) ? pOCLInfixOperator : (pOCLInfixOperator = new OCLInfixOperatorElements());
	}
	
	public ParserRule getOCLInfixOperatorRule() {
		return getOCLInfixOperatorAccess().getRule();
	}

	//selfExpression:
	//	"self";
	public SelfExpressionElements getSelfExpressionAccess() {
		return (pSelfExpression != null) ? pSelfExpression : (pSelfExpression = new SelfExpressionElements());
	}
	
	public ParserRule getSelfExpressionRule() {
		return getSelfExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
